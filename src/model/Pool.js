/**
 * test opensvc agent api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.12.19
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Pool model module.
 * @module model/Pool
 * @version 3.12.19
 */
class Pool {
    /**
     * Constructs a new <code>Pool</code>.
     * @alias module:model/Pool
     * @param name {String} 
     * @param type {String} 
     * @param head {String} 
     * @param capabilities {Array.<String>} 
     * @param free {Number} 
     * @param used {Number} 
     * @param size {Number} 
     * @param volumeCount {Number} 
     */
    constructor(name, type, head, capabilities, free, used, size, volumeCount) { 
        
        Pool.initialize(this, name, type, head, capabilities, free, used, size, volumeCount);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, type, head, capabilities, free, used, size, volumeCount) { 
        obj['name'] = name;
        obj['type'] = type;
        obj['head'] = head;
        obj['capabilities'] = capabilities;
        obj['free'] = free;
        obj['used'] = used;
        obj['size'] = size;
        obj['volume_count'] = volumeCount;
    }

    /**
     * Constructs a <code>Pool</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Pool} obj Optional instance to populate.
     * @return {module:model/Pool} The populated <code>Pool</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Pool();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('head')) {
                obj['head'] = ApiClient.convertToType(data['head'], 'String');
            }
            if (data.hasOwnProperty('capabilities')) {
                obj['capabilities'] = ApiClient.convertToType(data['capabilities'], ['String']);
            }
            if (data.hasOwnProperty('errors')) {
                obj['errors'] = ApiClient.convertToType(data['errors'], ['String']);
            }
            if (data.hasOwnProperty('free')) {
                obj['free'] = ApiClient.convertToType(data['free'], 'Number');
            }
            if (data.hasOwnProperty('used')) {
                obj['used'] = ApiClient.convertToType(data['used'], 'Number');
            }
            if (data.hasOwnProperty('size')) {
                obj['size'] = ApiClient.convertToType(data['size'], 'Number');
            }
            if (data.hasOwnProperty('volume_count')) {
                obj['volume_count'] = ApiClient.convertToType(data['volume_count'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Pool</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Pool</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Pool.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['head'] && !(typeof data['head'] === 'string' || data['head'] instanceof String)) {
            throw new Error("Expected the field `head` to be a primitive type in the JSON string but got " + data['head']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['capabilities'])) {
            throw new Error("Expected the field `capabilities` to be an array in the JSON data but got " + data['capabilities']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['errors'])) {
            throw new Error("Expected the field `errors` to be an array in the JSON data but got " + data['errors']);
        }

        return true;
    }


}

Pool.RequiredProperties = ["name", "type", "head", "capabilities", "free", "used", "size", "volume_count"];

/**
 * @member {String} name
 */
Pool.prototype['name'] = undefined;

/**
 * @member {String} type
 */
Pool.prototype['type'] = undefined;

/**
 * @member {String} head
 */
Pool.prototype['head'] = undefined;

/**
 * @member {Array.<String>} capabilities
 */
Pool.prototype['capabilities'] = undefined;

/**
 * @member {Array.<String>} errors
 */
Pool.prototype['errors'] = undefined;

/**
 * @member {Number} free
 */
Pool.prototype['free'] = undefined;

/**
 * @member {Number} used
 */
Pool.prototype['used'] = undefined;

/**
 * @member {Number} size
 */
Pool.prototype['size'] = undefined;

/**
 * @member {Number} volume_count
 */
Pool.prototype['volume_count'] = undefined;






export default Pool;

