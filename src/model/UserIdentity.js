/**
 * opensvc agent api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.12.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The UserIdentity model module.
 * @module model/UserIdentity
 * @version 3.12.2
 */
class UserIdentity {
    /**
     * Constructs a new <code>UserIdentity</code>.
     * @alias module:model/UserIdentity
     * @param name {String} 
     * @param namespace {String} 
     * @param rawGrant {String} 
     * @param grant {Object.<String, Array.<String>>} 
     */
    constructor(name, namespace, rawGrant, grant) { 
        
        UserIdentity.initialize(this, name, namespace, rawGrant, grant);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, namespace, rawGrant, grant) { 
        obj['name'] = name;
        obj['namespace'] = namespace;
        obj['raw_grant'] = rawGrant;
        obj['grant'] = grant;
    }

    /**
     * Constructs a <code>UserIdentity</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UserIdentity} obj Optional instance to populate.
     * @return {module:model/UserIdentity} The populated <code>UserIdentity</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UserIdentity();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('namespace')) {
                obj['namespace'] = ApiClient.convertToType(data['namespace'], 'String');
            }
            if (data.hasOwnProperty('auth')) {
                obj['auth'] = ApiClient.convertToType(data['auth'], 'String');
            }
            if (data.hasOwnProperty('raw_grant')) {
                obj['raw_grant'] = ApiClient.convertToType(data['raw_grant'], 'String');
            }
            if (data.hasOwnProperty('grant')) {
                obj['grant'] = ApiClient.convertToType(data['grant'], {'String': ['String']});
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UserIdentity</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UserIdentity</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of UserIdentity.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['namespace'] && !(typeof data['namespace'] === 'string' || data['namespace'] instanceof String)) {
            throw new Error("Expected the field `namespace` to be a primitive type in the JSON string but got " + data['namespace']);
        }
        // ensure the json data is a string
        if (data['auth'] && !(typeof data['auth'] === 'string' || data['auth'] instanceof String)) {
            throw new Error("Expected the field `auth` to be a primitive type in the JSON string but got " + data['auth']);
        }
        // ensure the json data is a string
        if (data['raw_grant'] && !(typeof data['raw_grant'] === 'string' || data['raw_grant'] instanceof String)) {
            throw new Error("Expected the field `raw_grant` to be a primitive type in the JSON string but got " + data['raw_grant']);
        }

        return true;
    }


}

UserIdentity.RequiredProperties = ["name", "namespace", "raw_grant", "grant"];

/**
 * @member {String} name
 */
UserIdentity.prototype['name'] = undefined;

/**
 * @member {String} namespace
 */
UserIdentity.prototype['namespace'] = undefined;

/**
 * @member {String} auth
 */
UserIdentity.prototype['auth'] = undefined;

/**
 * @member {String} raw_grant
 */
UserIdentity.prototype['raw_grant'] = undefined;

/**
 * @member {Object.<String, Array.<String>>} grant
 */
UserIdentity.prototype['grant'] = undefined;






export default UserIdentity;

