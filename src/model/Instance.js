/**
 * opensvc agent api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.12.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import InstanceConfig from './InstanceConfig';
import InstanceMonitor from './InstanceMonitor';
import InstanceStatus from './InstanceStatus';

/**
 * The Instance model module.
 * @module model/Instance
 * @version 3.12.2
 */
class Instance {
    /**
     * Constructs a new <code>Instance</code>.
     * @alias module:model/Instance
     */
    constructor() { 
        
        Instance.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Instance</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Instance} obj Optional instance to populate.
     * @return {module:model/Instance} The populated <code>Instance</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Instance();

            if (data.hasOwnProperty('config')) {
                obj['config'] = InstanceConfig.constructFromObject(data['config']);
            }
            if (data.hasOwnProperty('monitor')) {
                obj['monitor'] = InstanceMonitor.constructFromObject(data['monitor']);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = InstanceStatus.constructFromObject(data['status']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Instance</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Instance</code>.
     */
    static validateJSON(data) {
        // validate the optional field `config`
        if (data['config']) { // data not null
          InstanceConfig.validateJSON(data['config']);
        }
        // validate the optional field `monitor`
        if (data['monitor']) { // data not null
          InstanceMonitor.validateJSON(data['monitor']);
        }
        // validate the optional field `status`
        if (data['status']) { // data not null
          InstanceStatus.validateJSON(data['status']);
        }

        return true;
    }


}



/**
 * @member {module:model/InstanceConfig} config
 */
Instance.prototype['config'] = undefined;

/**
 * @member {module:model/InstanceMonitor} monitor
 */
Instance.prototype['monitor'] = undefined;

/**
 * @member {module:model/InstanceStatus} status
 */
Instance.prototype['status'] = undefined;






export default Instance;

