/**
 * test opensvc agent api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.12.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Instance from './Instance';
import InstanceMeta from './InstanceMeta';

/**
 * The InstanceItem model module.
 * @module model/InstanceItem
 * @version 3.12.9
 */
class InstanceItem {
    /**
     * Constructs a new <code>InstanceItem</code>.
     * @alias module:model/InstanceItem
     * @param kind {module:model/InstanceItem.KindEnum} 
     * @param meta {module:model/InstanceMeta} 
     * @param data {module:model/Instance} 
     */
    constructor(kind, meta, data) { 
        
        InstanceItem.initialize(this, kind, meta, data);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, kind, meta, data) { 
        obj['kind'] = kind;
        obj['meta'] = meta;
        obj['data'] = data;
    }

    /**
     * Constructs a <code>InstanceItem</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InstanceItem} obj Optional instance to populate.
     * @return {module:model/InstanceItem} The populated <code>InstanceItem</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InstanceItem();

            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('meta')) {
                obj['meta'] = InstanceMeta.constructFromObject(data['meta']);
            }
            if (data.hasOwnProperty('data')) {
                obj['data'] = Instance.constructFromObject(data['data']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>InstanceItem</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>InstanceItem</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of InstanceItem.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // validate the optional field `meta`
        if (data['meta']) { // data not null
          InstanceMeta.validateJSON(data['meta']);
        }
        // validate the optional field `data`
        if (data['data']) { // data not null
          Instance.validateJSON(data['data']);
        }

        return true;
    }


}

InstanceItem.RequiredProperties = ["kind", "meta", "data"];

/**
 * @member {module:model/InstanceItem.KindEnum} kind
 */
InstanceItem.prototype['kind'] = undefined;

/**
 * @member {module:model/InstanceMeta} meta
 */
InstanceItem.prototype['meta'] = undefined;

/**
 * @member {module:model/Instance} data
 */
InstanceItem.prototype['data'] = undefined;





/**
 * Allowed values for the <code>kind</code> property.
 * @enum {String}
 * @readonly
 */
InstanceItem['KindEnum'] = {

    /**
     * value: "InstanceItem"
     * @const
     */
    "InstanceItem": "InstanceItem"
};



export default InstanceItem;

