/**
 * opensvc agent api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.12.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AuthInfoOpenid from './AuthInfoOpenid';

/**
 * The AuthInfo model module.
 * @module model/AuthInfo
 * @version 3.12.2
 */
class AuthInfo {
    /**
     * Constructs a new <code>AuthInfo</code>.
     * @alias module:model/AuthInfo
     * @param methods {Array.<module:model/AuthInfo.MethodsEnum>} 
     */
    constructor(methods) { 
        
        AuthInfo.initialize(this, methods);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, methods) { 
        obj['methods'] = methods;
    }

    /**
     * Constructs a <code>AuthInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AuthInfo} obj Optional instance to populate.
     * @return {module:model/AuthInfo} The populated <code>AuthInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AuthInfo();

            if (data.hasOwnProperty('methods')) {
                obj['methods'] = ApiClient.convertToType(data['methods'], ['String']);
            }
            if (data.hasOwnProperty('openid')) {
                obj['openid'] = AuthInfoOpenid.constructFromObject(data['openid']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AuthInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AuthInfo</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AuthInfo.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['methods'])) {
            throw new Error("Expected the field `methods` to be an array in the JSON data but got " + data['methods']);
        }
        // validate the optional field `openid`
        if (data['openid']) { // data not null
          AuthInfoOpenid.validateJSON(data['openid']);
        }

        return true;
    }


}

AuthInfo.RequiredProperties = ["methods"];

/**
 * @member {Array.<module:model/AuthInfo.MethodsEnum>} methods
 */
AuthInfo.prototype['methods'] = undefined;

/**
 * @member {module:model/AuthInfoOpenid} openid
 */
AuthInfo.prototype['openid'] = undefined;





/**
 * Allowed values for the <code>methods</code> property.
 * @enum {String}
 * @readonly
 */
AuthInfo['MethodsEnum'] = {

    /**
     * value: "openid"
     * @const
     */
    "openid": "openid",

    /**
     * value: "basic"
     * @const
     */
    "basic": "basic",

    /**
     * value: "x509"
     * @const
     */
    "x509": "x509",

    /**
     * value: "session"
     * @const
     */
    "session": "session"
};



export default AuthInfo;

