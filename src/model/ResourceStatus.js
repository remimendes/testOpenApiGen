/**
 * test opensvc agent api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.12.19
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ResourceLogEntry from './ResourceLogEntry';
import ResourceProvisionStatus from './ResourceProvisionStatus';
import Status from './Status';

/**
 * The ResourceStatus model module.
 * @module model/ResourceStatus
 * @version 3.12.19
 */
class ResourceStatus {
    /**
     * Constructs a new <code>ResourceStatus</code>.
     * @alias module:model/ResourceStatus
     * @param disable {Boolean} hints the resource ignores all state transition actions
     * @param encap {Boolean} indicates that the resource is handled by the encapsulated agents, and ignored at the hypervisor level 
     * @param info {Object} key-value pairs providing interesting information to collect site-wide about this resource 
     * @param label {String} 
     * @param log {Array.<module:model/ResourceLogEntry>} 
     * @param monitor {Boolean} tells the daemon if it should trigger a monitor action when the resource is not up 
     * @param optional {Boolean} is resource status aggregated into Overall instead of Avail instance status. Errors in optional resource don't stop a state transition action 
     * @param provisioned {module:model/ResourceProvisionStatus} 
     * @param restart {Number} 
     * @param standby {Boolean} resource should always be up, even after a stop state transition action 
     * @param status {module:model/Status} 
     * @param subset {String} the name of the subset this resource is assigned to
     * @param tags {Array.<String>} 
     * @param type {String} 
     */
    constructor(disable, encap, info, label, log, monitor, optional, provisioned, restart, standby, status, subset, tags, type) { 
        
        ResourceStatus.initialize(this, disable, encap, info, label, log, monitor, optional, provisioned, restart, standby, status, subset, tags, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, disable, encap, info, label, log, monitor, optional, provisioned, restart, standby, status, subset, tags, type) { 
        obj['disable'] = disable;
        obj['encap'] = encap;
        obj['info'] = info;
        obj['label'] = label;
        obj['log'] = log;
        obj['monitor'] = monitor;
        obj['optional'] = optional;
        obj['provisioned'] = provisioned;
        obj['restart'] = restart;
        obj['standby'] = standby;
        obj['status'] = status;
        obj['subset'] = subset;
        obj['tags'] = tags;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>ResourceStatus</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ResourceStatus} obj Optional instance to populate.
     * @return {module:model/ResourceStatus} The populated <code>ResourceStatus</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ResourceStatus();

            if (data.hasOwnProperty('disable')) {
                obj['disable'] = ApiClient.convertToType(data['disable'], 'Boolean');
            }
            if (data.hasOwnProperty('encap')) {
                obj['encap'] = ApiClient.convertToType(data['encap'], 'Boolean');
            }
            if (data.hasOwnProperty('info')) {
                obj['info'] = ApiClient.convertToType(data['info'], Object);
            }
            if (data.hasOwnProperty('label')) {
                obj['label'] = ApiClient.convertToType(data['label'], 'String');
            }
            if (data.hasOwnProperty('log')) {
                obj['log'] = ApiClient.convertToType(data['log'], [ResourceLogEntry]);
            }
            if (data.hasOwnProperty('monitor')) {
                obj['monitor'] = ApiClient.convertToType(data['monitor'], 'Boolean');
            }
            if (data.hasOwnProperty('optional')) {
                obj['optional'] = ApiClient.convertToType(data['optional'], 'Boolean');
            }
            if (data.hasOwnProperty('provisioned')) {
                obj['provisioned'] = ResourceProvisionStatus.constructFromObject(data['provisioned']);
            }
            if (data.hasOwnProperty('restart')) {
                obj['restart'] = ApiClient.convertToType(data['restart'], 'Number');
            }
            if (data.hasOwnProperty('standby')) {
                obj['standby'] = ApiClient.convertToType(data['standby'], 'Boolean');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = Status.constructFromObject(data['status']);
            }
            if (data.hasOwnProperty('subset')) {
                obj['subset'] = ApiClient.convertToType(data['subset'], 'String');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], ['String']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ResourceStatus</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ResourceStatus</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ResourceStatus.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['label'] && !(typeof data['label'] === 'string' || data['label'] instanceof String)) {
            throw new Error("Expected the field `label` to be a primitive type in the JSON string but got " + data['label']);
        }
        if (data['log']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['log'])) {
                throw new Error("Expected the field `log` to be an array in the JSON data but got " + data['log']);
            }
            // validate the optional field `log` (array)
            for (const item of data['log']) {
                ResourceLogEntry.validateJSON(item);
            };
        }
        // validate the optional field `provisioned`
        if (data['provisioned']) { // data not null
          ResourceProvisionStatus.validateJSON(data['provisioned']);
        }
        // ensure the json data is a string
        if (data['subset'] && !(typeof data['subset'] === 'string' || data['subset'] instanceof String)) {
            throw new Error("Expected the field `subset` to be a primitive type in the JSON string but got " + data['subset']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['tags'])) {
            throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

ResourceStatus.RequiredProperties = ["disable", "encap", "info", "label", "log", "monitor", "optional", "provisioned", "restart", "standby", "status", "subset", "tags", "type"];

/**
 * hints the resource ignores all state transition actions
 * @member {Boolean} disable
 */
ResourceStatus.prototype['disable'] = undefined;

/**
 * indicates that the resource is handled by the encapsulated agents, and ignored at the hypervisor level 
 * @member {Boolean} encap
 */
ResourceStatus.prototype['encap'] = undefined;

/**
 * key-value pairs providing interesting information to collect site-wide about this resource 
 * @member {Object} info
 */
ResourceStatus.prototype['info'] = undefined;

/**
 * @member {String} label
 */
ResourceStatus.prototype['label'] = undefined;

/**
 * @member {Array.<module:model/ResourceLogEntry>} log
 */
ResourceStatus.prototype['log'] = undefined;

/**
 * tells the daemon if it should trigger a monitor action when the resource is not up 
 * @member {Boolean} monitor
 */
ResourceStatus.prototype['monitor'] = undefined;

/**
 * is resource status aggregated into Overall instead of Avail instance status. Errors in optional resource don't stop a state transition action 
 * @member {Boolean} optional
 */
ResourceStatus.prototype['optional'] = undefined;

/**
 * @member {module:model/ResourceProvisionStatus} provisioned
 */
ResourceStatus.prototype['provisioned'] = undefined;

/**
 * @member {Number} restart
 */
ResourceStatus.prototype['restart'] = undefined;

/**
 * resource should always be up, even after a stop state transition action 
 * @member {Boolean} standby
 */
ResourceStatus.prototype['standby'] = undefined;

/**
 * @member {module:model/Status} status
 */
ResourceStatus.prototype['status'] = undefined;

/**
 * the name of the subset this resource is assigned to
 * @member {String} subset
 */
ResourceStatus.prototype['subset'] = undefined;

/**
 * @member {Array.<String>} tags
 */
ResourceStatus.prototype['tags'] = undefined;

/**
 * @member {String} type
 */
ResourceStatus.prototype['type'] = undefined;






export default ResourceStatus;

