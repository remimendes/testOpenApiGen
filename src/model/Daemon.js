/**
 * test opensvc agent api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.12.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DaemonCollector from './DaemonCollector';
import DaemonDNS from './DaemonDNS';
import DaemonHb from './DaemonHb';
import DaemonListener from './DaemonListener';
import DaemonMonitor from './DaemonMonitor';
import DaemonScheduler from './DaemonScheduler';

/**
 * The Daemon model module.
 * @module model/Daemon
 * @version 3.12.9
 */
class Daemon {
    /**
     * Constructs a new <code>Daemon</code>.
     * @alias module:model/Daemon
     * @param collector {module:model/DaemonCollector} 
     * @param dns {module:model/DaemonDNS} 
     * @param hb {module:model/DaemonHb} 
     * @param listener {module:model/DaemonListener} 
     * @param monitor {module:model/DaemonMonitor} 
     * @param routines {Number} 
     * @param scheduler {module:model/DaemonScheduler} 
     */
    constructor(collector, dns, hb, listener, monitor, routines, scheduler) { 
        
        Daemon.initialize(this, collector, dns, hb, listener, monitor, routines, scheduler);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, collector, dns, hb, listener, monitor, routines, scheduler) { 
        obj['collector'] = collector;
        obj['dns'] = dns;
        obj['hb'] = hb;
        obj['listener'] = listener;
        obj['monitor'] = monitor;
        obj['routines'] = routines;
        obj['scheduler'] = scheduler;
    }

    /**
     * Constructs a <code>Daemon</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Daemon} obj Optional instance to populate.
     * @return {module:model/Daemon} The populated <code>Daemon</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Daemon();

            if (data.hasOwnProperty('collector')) {
                obj['collector'] = DaemonCollector.constructFromObject(data['collector']);
            }
            if (data.hasOwnProperty('dns')) {
                obj['dns'] = DaemonDNS.constructFromObject(data['dns']);
            }
            if (data.hasOwnProperty('hb')) {
                obj['hb'] = DaemonHb.constructFromObject(data['hb']);
            }
            if (data.hasOwnProperty('listener')) {
                obj['listener'] = DaemonListener.constructFromObject(data['listener']);
            }
            if (data.hasOwnProperty('monitor')) {
                obj['monitor'] = DaemonMonitor.constructFromObject(data['monitor']);
            }
            if (data.hasOwnProperty('routines')) {
                obj['routines'] = ApiClient.convertToType(data['routines'], 'Number');
            }
            if (data.hasOwnProperty('scheduler')) {
                obj['scheduler'] = DaemonScheduler.constructFromObject(data['scheduler']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Daemon</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Daemon</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Daemon.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `collector`
        if (data['collector']) { // data not null
          DaemonCollector.validateJSON(data['collector']);
        }
        // validate the optional field `dns`
        if (data['dns']) { // data not null
          DaemonDNS.validateJSON(data['dns']);
        }
        // validate the optional field `hb`
        if (data['hb']) { // data not null
          DaemonHb.validateJSON(data['hb']);
        }
        // validate the optional field `listener`
        if (data['listener']) { // data not null
          DaemonListener.validateJSON(data['listener']);
        }
        // validate the optional field `monitor`
        if (data['monitor']) { // data not null
          DaemonMonitor.validateJSON(data['monitor']);
        }
        // validate the optional field `scheduler`
        if (data['scheduler']) { // data not null
          DaemonScheduler.validateJSON(data['scheduler']);
        }

        return true;
    }


}

Daemon.RequiredProperties = ["collector", "dns", "hb", "listener", "monitor", "routines", "scheduler"];

/**
 * @member {module:model/DaemonCollector} collector
 */
Daemon.prototype['collector'] = undefined;

/**
 * @member {module:model/DaemonDNS} dns
 */
Daemon.prototype['dns'] = undefined;

/**
 * @member {module:model/DaemonHb} hb
 */
Daemon.prototype['hb'] = undefined;

/**
 * @member {module:model/DaemonListener} listener
 */
Daemon.prototype['listener'] = undefined;

/**
 * @member {module:model/DaemonMonitor} monitor
 */
Daemon.prototype['monitor'] = undefined;

/**
 * @member {Number} routines
 */
Daemon.prototype['routines'] = undefined;

/**
 * @member {module:model/DaemonScheduler} scheduler
 */
Daemon.prototype['scheduler'] = undefined;






export default Daemon;

