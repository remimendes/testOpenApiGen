/**
 * opensvc agent api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.12.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DRBDAllocation model module.
 * @module model/DRBDAllocation
 * @version 3.12.2
 */
class DRBDAllocation {
    /**
     * Constructs a new <code>DRBDAllocation</code>.
     * @alias module:model/DRBDAllocation
     * @param id {String} 
     * @param port {Number} 
     * @param minor {Number} 
     * @param expiredAt {Date} 
     */
    constructor(id, port, minor, expiredAt) { 
        
        DRBDAllocation.initialize(this, id, port, minor, expiredAt);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, port, minor, expiredAt) { 
        obj['id'] = id;
        obj['port'] = port;
        obj['minor'] = minor;
        obj['expired_at'] = expiredAt;
    }

    /**
     * Constructs a <code>DRBDAllocation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DRBDAllocation} obj Optional instance to populate.
     * @return {module:model/DRBDAllocation} The populated <code>DRBDAllocation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DRBDAllocation();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('port')) {
                obj['port'] = ApiClient.convertToType(data['port'], 'Number');
            }
            if (data.hasOwnProperty('minor')) {
                obj['minor'] = ApiClient.convertToType(data['minor'], 'Number');
            }
            if (data.hasOwnProperty('expired_at')) {
                obj['expired_at'] = ApiClient.convertToType(data['expired_at'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DRBDAllocation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DRBDAllocation</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DRBDAllocation.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }

        return true;
    }


}

DRBDAllocation.RequiredProperties = ["id", "port", "minor", "expired_at"];

/**
 * @member {String} id
 */
DRBDAllocation.prototype['id'] = undefined;

/**
 * @member {Number} port
 */
DRBDAllocation.prototype['port'] = undefined;

/**
 * @member {Number} minor
 */
DRBDAllocation.prototype['minor'] = undefined;

/**
 * @member {Date} expired_at
 */
DRBDAllocation.prototype['expired_at'] = undefined;






export default DRBDAllocation;

