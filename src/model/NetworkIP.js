/**
 * opensvc agent api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.12.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import NetworkIPNetwork from './NetworkIPNetwork';

/**
 * The NetworkIP model module.
 * @module model/NetworkIP
 * @version 3.12.2
 */
class NetworkIP {
    /**
     * Constructs a new <code>NetworkIP</code>.
     * @alias module:model/NetworkIP
     * @param ip {String} 
     * @param node {String} 
     * @param path {String} 
     * @param rid {String} 
     * @param network {module:model/NetworkIPNetwork} 
     */
    constructor(ip, node, path, rid, network) { 
        
        NetworkIP.initialize(this, ip, node, path, rid, network);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, ip, node, path, rid, network) { 
        obj['ip'] = ip;
        obj['node'] = node;
        obj['path'] = path;
        obj['rid'] = rid;
        obj['network'] = network;
    }

    /**
     * Constructs a <code>NetworkIP</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NetworkIP} obj Optional instance to populate.
     * @return {module:model/NetworkIP} The populated <code>NetworkIP</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NetworkIP();

            if (data.hasOwnProperty('ip')) {
                obj['ip'] = ApiClient.convertToType(data['ip'], 'String');
            }
            if (data.hasOwnProperty('node')) {
                obj['node'] = ApiClient.convertToType(data['node'], 'String');
            }
            if (data.hasOwnProperty('path')) {
                obj['path'] = ApiClient.convertToType(data['path'], 'String');
            }
            if (data.hasOwnProperty('rid')) {
                obj['rid'] = ApiClient.convertToType(data['rid'], 'String');
            }
            if (data.hasOwnProperty('network')) {
                obj['network'] = NetworkIPNetwork.constructFromObject(data['network']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NetworkIP</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NetworkIP</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of NetworkIP.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['ip'] && !(typeof data['ip'] === 'string' || data['ip'] instanceof String)) {
            throw new Error("Expected the field `ip` to be a primitive type in the JSON string but got " + data['ip']);
        }
        // ensure the json data is a string
        if (data['node'] && !(typeof data['node'] === 'string' || data['node'] instanceof String)) {
            throw new Error("Expected the field `node` to be a primitive type in the JSON string but got " + data['node']);
        }
        // ensure the json data is a string
        if (data['path'] && !(typeof data['path'] === 'string' || data['path'] instanceof String)) {
            throw new Error("Expected the field `path` to be a primitive type in the JSON string but got " + data['path']);
        }
        // ensure the json data is a string
        if (data['rid'] && !(typeof data['rid'] === 'string' || data['rid'] instanceof String)) {
            throw new Error("Expected the field `rid` to be a primitive type in the JSON string but got " + data['rid']);
        }
        // validate the optional field `network`
        if (data['network']) { // data not null
          NetworkIPNetwork.validateJSON(data['network']);
        }

        return true;
    }


}

NetworkIP.RequiredProperties = ["ip", "node", "path", "rid", "network"];

/**
 * @member {String} ip
 */
NetworkIP.prototype['ip'] = undefined;

/**
 * @member {String} node
 */
NetworkIP.prototype['node'] = undefined;

/**
 * @member {String} path
 */
NetworkIP.prototype['path'] = undefined;

/**
 * @member {String} rid
 */
NetworkIP.prototype['rid'] = undefined;

/**
 * @member {module:model/NetworkIPNetwork} network
 */
NetworkIP.prototype['network'] = undefined;






export default NetworkIP;

