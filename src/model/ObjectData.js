/**
 * test opensvc agent api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.12.19
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Instance from './Instance';
import Orchestrate from './Orchestrate';
import PlacementPolicy from './PlacementPolicy';
import PlacementState from './PlacementState';
import Provisioned from './Provisioned';
import Status from './Status';
import Topology from './Topology';

/**
 * The ObjectData model module.
 * @module model/ObjectData
 * @version 3.12.19
 */
class ObjectData {
    /**
     * Constructs a new <code>ObjectData</code>.
     * @alias module:model/ObjectData
     * @param avail {module:model/Status} 
     * @param flexMax {Number} 
     * @param flexMin {Number} 
     * @param flexTarget {Number} 
     * @param frozen {String} 
     * @param instances {Object.<String, module:model/Instance>} 
     * @param orchestrate {module:model/Orchestrate} 
     * @param overall {module:model/Status} 
     * @param placementPolicy {module:model/PlacementPolicy} 
     * @param placementState {module:model/PlacementState} 
     * @param priority {Number} 
     * @param provisioned {module:model/Provisioned} 
     * @param scope {Array.<String>} 
     * @param topology {module:model/Topology} 
     * @param upInstancesCount {Number} 
     * @param updatedAt {String} 
     */
    constructor(avail, flexMax, flexMin, flexTarget, frozen, instances, orchestrate, overall, placementPolicy, placementState, priority, provisioned, scope, topology, upInstancesCount, updatedAt) { 
        
        ObjectData.initialize(this, avail, flexMax, flexMin, flexTarget, frozen, instances, orchestrate, overall, placementPolicy, placementState, priority, provisioned, scope, topology, upInstancesCount, updatedAt);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, avail, flexMax, flexMin, flexTarget, frozen, instances, orchestrate, overall, placementPolicy, placementState, priority, provisioned, scope, topology, upInstancesCount, updatedAt) { 
        obj['avail'] = avail;
        obj['flex_max'] = flexMax;
        obj['flex_min'] = flexMin;
        obj['flex_target'] = flexTarget;
        obj['frozen'] = frozen;
        obj['instances'] = instances;
        obj['orchestrate'] = orchestrate;
        obj['overall'] = overall;
        obj['placement_policy'] = placementPolicy;
        obj['placement_state'] = placementState;
        obj['priority'] = priority;
        obj['provisioned'] = provisioned;
        obj['scope'] = scope;
        obj['topology'] = topology;
        obj['up_instances_count'] = upInstancesCount;
        obj['updated_at'] = updatedAt;
    }

    /**
     * Constructs a <code>ObjectData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ObjectData} obj Optional instance to populate.
     * @return {module:model/ObjectData} The populated <code>ObjectData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ObjectData();

            if (data.hasOwnProperty('avail')) {
                obj['avail'] = Status.constructFromObject(data['avail']);
            }
            if (data.hasOwnProperty('flex_max')) {
                obj['flex_max'] = ApiClient.convertToType(data['flex_max'], 'Number');
            }
            if (data.hasOwnProperty('flex_min')) {
                obj['flex_min'] = ApiClient.convertToType(data['flex_min'], 'Number');
            }
            if (data.hasOwnProperty('flex_target')) {
                obj['flex_target'] = ApiClient.convertToType(data['flex_target'], 'Number');
            }
            if (data.hasOwnProperty('frozen')) {
                obj['frozen'] = ApiClient.convertToType(data['frozen'], 'String');
            }
            if (data.hasOwnProperty('instances')) {
                obj['instances'] = ApiClient.convertToType(data['instances'], {'String': Instance});
            }
            if (data.hasOwnProperty('orchestrate')) {
                obj['orchestrate'] = Orchestrate.constructFromObject(data['orchestrate']);
            }
            if (data.hasOwnProperty('overall')) {
                obj['overall'] = Status.constructFromObject(data['overall']);
            }
            if (data.hasOwnProperty('placement_policy')) {
                obj['placement_policy'] = PlacementPolicy.constructFromObject(data['placement_policy']);
            }
            if (data.hasOwnProperty('placement_state')) {
                obj['placement_state'] = PlacementState.constructFromObject(data['placement_state']);
            }
            if (data.hasOwnProperty('pool')) {
                obj['pool'] = ApiClient.convertToType(data['pool'], 'String');
            }
            if (data.hasOwnProperty('priority')) {
                obj['priority'] = ApiClient.convertToType(data['priority'], 'Number');
            }
            if (data.hasOwnProperty('provisioned')) {
                obj['provisioned'] = Provisioned.constructFromObject(data['provisioned']);
            }
            if (data.hasOwnProperty('scope')) {
                obj['scope'] = ApiClient.convertToType(data['scope'], ['String']);
            }
            if (data.hasOwnProperty('size')) {
                obj['size'] = ApiClient.convertToType(data['size'], 'Number');
            }
            if (data.hasOwnProperty('topology')) {
                obj['topology'] = Topology.constructFromObject(data['topology']);
            }
            if (data.hasOwnProperty('up_instances_count')) {
                obj['up_instances_count'] = ApiClient.convertToType(data['up_instances_count'], 'Number');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ObjectData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ObjectData</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ObjectData.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['frozen'] && !(typeof data['frozen'] === 'string' || data['frozen'] instanceof String)) {
            throw new Error("Expected the field `frozen` to be a primitive type in the JSON string but got " + data['frozen']);
        }
        // ensure the json data is a string
        if (data['pool'] && !(typeof data['pool'] === 'string' || data['pool'] instanceof String)) {
            throw new Error("Expected the field `pool` to be a primitive type in the JSON string but got " + data['pool']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['scope'])) {
            throw new Error("Expected the field `scope` to be an array in the JSON data but got " + data['scope']);
        }
        // ensure the json data is a string
        if (data['updated_at'] && !(typeof data['updated_at'] === 'string' || data['updated_at'] instanceof String)) {
            throw new Error("Expected the field `updated_at` to be a primitive type in the JSON string but got " + data['updated_at']);
        }

        return true;
    }


}

ObjectData.RequiredProperties = ["avail", "flex_max", "flex_min", "flex_target", "frozen", "instances", "orchestrate", "overall", "placement_policy", "placement_state", "priority", "provisioned", "scope", "topology", "up_instances_count", "updated_at"];

/**
 * @member {module:model/Status} avail
 */
ObjectData.prototype['avail'] = undefined;

/**
 * @member {Number} flex_max
 */
ObjectData.prototype['flex_max'] = undefined;

/**
 * @member {Number} flex_min
 */
ObjectData.prototype['flex_min'] = undefined;

/**
 * @member {Number} flex_target
 */
ObjectData.prototype['flex_target'] = undefined;

/**
 * @member {String} frozen
 */
ObjectData.prototype['frozen'] = undefined;

/**
 * @member {Object.<String, module:model/Instance>} instances
 */
ObjectData.prototype['instances'] = undefined;

/**
 * @member {module:model/Orchestrate} orchestrate
 */
ObjectData.prototype['orchestrate'] = undefined;

/**
 * @member {module:model/Status} overall
 */
ObjectData.prototype['overall'] = undefined;

/**
 * @member {module:model/PlacementPolicy} placement_policy
 */
ObjectData.prototype['placement_policy'] = undefined;

/**
 * @member {module:model/PlacementState} placement_state
 */
ObjectData.prototype['placement_state'] = undefined;

/**
 * @member {String} pool
 */
ObjectData.prototype['pool'] = undefined;

/**
 * @member {Number} priority
 */
ObjectData.prototype['priority'] = undefined;

/**
 * @member {module:model/Provisioned} provisioned
 */
ObjectData.prototype['provisioned'] = undefined;

/**
 * @member {Array.<String>} scope
 */
ObjectData.prototype['scope'] = undefined;

/**
 * @member {Number} size
 */
ObjectData.prototype['size'] = undefined;

/**
 * @member {module:model/Topology} topology
 */
ObjectData.prototype['topology'] = undefined;

/**
 * @member {Number} up_instances_count
 */
ObjectData.prototype['up_instances_count'] = undefined;

/**
 * @member {String} updated_at
 */
ObjectData.prototype['updated_at'] = undefined;






export default ObjectData;

