/**
 * opensvc agent api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.12.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CapabilityList from '../model/CapabilityList';
import DRBDAllocation from '../model/DRBDAllocation';
import DRBDConfig from '../model/DRBDConfig';
import KeywordList from '../model/KeywordList';
import NodeActionAccepted from '../model/NodeActionAccepted';
import NodeInfo from '../model/NodeInfo';
import NodeList from '../model/NodeList';
import OrchestrationQueued from '../model/OrchestrationQueued';
import PostNodeDRBDConfigRequest from '../model/PostNodeDRBDConfigRequest';
import Problem from '../model/Problem';
import ScheduleList from '../model/ScheduleList';

/**
* Node service.
* @module api/NodeApi
* @version 3.12.2
*/
export default class NodeApi {

    /**
    * Constructs a new NodeApi. 
    * @alias module:api/NodeApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getNodeCapabilities operation.
     * @callback module:api/NodeApi~getNodeCapabilitiesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CapabilityList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the capabilities of the node. Capability scanners are provided by the core agent and by every resource driver. Capabalities are used to enable or disable features based on the current operating system state. 
     * @param {String} nodename 
     * @param {module:api/NodeApi~getNodeCapabilitiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CapabilityList}
     */
    getNodeCapabilities(nodename, callback) {
      let postBody = null;
      // verify the required parameter 'nodename' is set
      if (nodename === undefined || nodename === null) {
        throw new Error("Missing the required parameter 'nodename' when calling getNodeCapabilities");
      }

      let pathParams = {
        'nodename': nodename
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CapabilityList;
      return this.apiClient.callApi(
        '/node/name/{nodename}/capabilities', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNodeConfigGet operation.
     * @callback module:api/NodeApi~getNodeConfigGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/KeywordList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get or evaluate a keyword in the node configuration file.
     * @param {String} nodename 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [kw] 
     * @param {Boolean} [evaluate] 
     * @param {String} [impersonate] 
     * @param {module:api/NodeApi~getNodeConfigGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/KeywordList}
     */
    getNodeConfigGet(nodename, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'nodename' is set
      if (nodename === undefined || nodename === null) {
        throw new Error("Missing the required parameter 'nodename' when calling getNodeConfigGet");
      }

      let pathParams = {
        'nodename': nodename
      };
      let queryParams = {
        'kw': this.apiClient.buildCollectionParam(opts['kw'], 'multi'),
        'evaluate': opts['evaluate'],
        'impersonate': opts['impersonate']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = KeywordList;
      return this.apiClient.callApi(
        '/node/name/{nodename}/config/get', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNodeDRBDAllocation operation.
     * @callback module:api/NodeApi~getNodeDRBDAllocationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DRBDAllocation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the drbd driver minor numbers and ports already allocated on the node. 
     * @param {String} nodename 
     * @param {module:api/NodeApi~getNodeDRBDAllocationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DRBDAllocation}
     */
    getNodeDRBDAllocation(nodename, callback) {
      let postBody = null;
      // verify the required parameter 'nodename' is set
      if (nodename === undefined || nodename === null) {
        throw new Error("Missing the required parameter 'nodename' when calling getNodeDRBDAllocation");
      }

      let pathParams = {
        'nodename': nodename
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DRBDAllocation;
      return this.apiClient.callApi(
        '/node/name/{nodename}/drbd/allocation', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNodeDRBDConfig operation.
     * @callback module:api/NodeApi~getNodeDRBDConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DRBDConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch from a node a drbd configuration file fragment. 
     * @param {String} nodename 
     * @param {String} name the full path of the file is deduced from the name
     * @param {module:api/NodeApi~getNodeDRBDConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DRBDConfig}
     */
    getNodeDRBDConfig(nodename, name, callback) {
      let postBody = null;
      // verify the required parameter 'nodename' is set
      if (nodename === undefined || nodename === null) {
        throw new Error("Missing the required parameter 'nodename' when calling getNodeDRBDConfig");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling getNodeDRBDConfig");
      }

      let pathParams = {
        'nodename': nodename
      };
      let queryParams = {
        'name': name
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DRBDConfig;
      return this.apiClient.callApi(
        '/node/name/{nodename}/drbd/config', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNodeLogs operation.
     * @callback module:api/NodeApi~getNodeLogsCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Serve new logs 
     * @param {String} nodename 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [filter] list of log filter
     * @param {Boolean} [follow] follow the logs
     * @param {Number} [lines] report this number of past last log entries
     * @param {Array.<String>} [paths] list of object paths to send logs for
     * @param {module:api/NodeApi~getNodeLogsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    getNodeLogs(nodename, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'nodename' is set
      if (nodename === undefined || nodename === null) {
        throw new Error("Missing the required parameter 'nodename' when calling getNodeLogs");
      }

      let pathParams = {
        'nodename': nodename
      };
      let queryParams = {
        'filter': this.apiClient.buildCollectionParam(opts['filter'], 'multi'),
        'follow': opts['follow'],
        'lines': opts['lines'],
        'paths': this.apiClient.buildCollectionParam(opts['paths'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['text/event-stream', 'application/json'];
      let returnType = File;
      return this.apiClient.callApi(
        '/node/name/{nodename}/log', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNodeSchedule operation.
     * @callback module:api/NodeApi~getNodeScheduleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScheduleList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the schedule table of the node. 
     * @param {String} nodename 
     * @param {module:api/NodeApi~getNodeScheduleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScheduleList}
     */
    getNodeSchedule(nodename, callback) {
      let postBody = null;
      // verify the required parameter 'nodename' is set
      if (nodename === undefined || nodename === null) {
        throw new Error("Missing the required parameter 'nodename' when calling getNodeSchedule");
      }

      let pathParams = {
        'nodename': nodename
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ScheduleList;
      return this.apiClient.callApi(
        '/node/name/{nodename}/schedule', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNodes operation.
     * @callback module:api/NodeApi~getNodesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NodeList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} [node] node selector expression.
     * @param {module:api/NodeApi~getNodesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NodeList}
     */
    getNodes(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'node': opts['node']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = NodeList;
      return this.apiClient.callApi(
        '/node', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNodesInfo operation.
     * @callback module:api/NodeApi~getNodesInfoCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/NodeInfo>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/NodeApi~getNodesInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/NodeInfo>}
     */
    getNodesInfo(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [NodeInfo];
      return this.apiClient.callApi(
        '/node/info', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postNodeActionPushAsset operation.
     * @callback module:api/NodeApi~postNodeActionPushAssetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NodeActionAccepted} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Refresh and send to the collector the asset discovery.
     * @param {String} nodename 
     * @param {Object} opts Optional parameters
     * @param {String} [requesterSid] 
     * @param {module:api/NodeApi~postNodeActionPushAssetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NodeActionAccepted}
     */
    postNodeActionPushAsset(nodename, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'nodename' is set
      if (nodename === undefined || nodename === null) {
        throw new Error("Missing the required parameter 'nodename' when calling postNodeActionPushAsset");
      }

      let pathParams = {
        'nodename': nodename
      };
      let queryParams = {
        'requester_sid': opts['requesterSid']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = NodeActionAccepted;
      return this.apiClient.callApi(
        '/node/name/{nodename}/action/push/asset', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postNodeActionPushDisk operation.
     * @callback module:api/NodeApi~postNodeActionPushDiskCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NodeActionAccepted} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Refresh and send to the collector the disk discovery.
     * @param {String} nodename 
     * @param {Object} opts Optional parameters
     * @param {String} [requesterSid] 
     * @param {module:api/NodeApi~postNodeActionPushDiskCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NodeActionAccepted}
     */
    postNodeActionPushDisk(nodename, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'nodename' is set
      if (nodename === undefined || nodename === null) {
        throw new Error("Missing the required parameter 'nodename' when calling postNodeActionPushDisk");
      }

      let pathParams = {
        'nodename': nodename
      };
      let queryParams = {
        'requester_sid': opts['requesterSid']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = NodeActionAccepted;
      return this.apiClient.callApi(
        '/node/name/{nodename}/action/push/disk', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postNodeActionPushPatch operation.
     * @callback module:api/NodeApi~postNodeActionPushPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NodeActionAccepted} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Refresh and send to the collector the package discovery.
     * @param {String} nodename 
     * @param {Object} opts Optional parameters
     * @param {String} [requesterSid] 
     * @param {module:api/NodeApi~postNodeActionPushPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NodeActionAccepted}
     */
    postNodeActionPushPatch(nodename, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'nodename' is set
      if (nodename === undefined || nodename === null) {
        throw new Error("Missing the required parameter 'nodename' when calling postNodeActionPushPatch");
      }

      let pathParams = {
        'nodename': nodename
      };
      let queryParams = {
        'requester_sid': opts['requesterSid']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = NodeActionAccepted;
      return this.apiClient.callApi(
        '/node/name/{nodename}/action/push/patch', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postNodeActionPushPkg operation.
     * @callback module:api/NodeApi~postNodeActionPushPkgCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NodeActionAccepted} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Refresh and send to the collector the package discovery.
     * @param {String} nodename 
     * @param {Object} opts Optional parameters
     * @param {String} [requesterSid] 
     * @param {module:api/NodeApi~postNodeActionPushPkgCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NodeActionAccepted}
     */
    postNodeActionPushPkg(nodename, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'nodename' is set
      if (nodename === undefined || nodename === null) {
        throw new Error("Missing the required parameter 'nodename' when calling postNodeActionPushPkg");
      }

      let pathParams = {
        'nodename': nodename
      };
      let queryParams = {
        'requester_sid': opts['requesterSid']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = NodeActionAccepted;
      return this.apiClient.callApi(
        '/node/name/{nodename}/action/push/pkg', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postNodeActionScanCapabilities operation.
     * @callback module:api/NodeApi~postNodeActionScanCapabilitiesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NodeActionAccepted} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Refresh the node capabilities cache. Capability scanners are provided by the core agent and by every resource driver. Capabalities are used to enable or disable features based on the current operating system state. 
     * @param {String} nodename 
     * @param {Object} opts Optional parameters
     * @param {String} [requesterSid] 
     * @param {module:api/NodeApi~postNodeActionScanCapabilitiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NodeActionAccepted}
     */
    postNodeActionScanCapabilities(nodename, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'nodename' is set
      if (nodename === undefined || nodename === null) {
        throw new Error("Missing the required parameter 'nodename' when calling postNodeActionScanCapabilities");
      }

      let pathParams = {
        'nodename': nodename
      };
      let queryParams = {
        'requester_sid': opts['requesterSid']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = NodeActionAccepted;
      return this.apiClient.callApi(
        '/node/name/{nodename}/action/scan/capabilities', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postNodeActionSysreport operation.
     * @callback module:api/NodeApi~postNodeActionSysreportCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NodeActionAccepted} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Collect and send a new sysreport.
     * @param {String} nodename 
     * @param {Object} opts Optional parameters
     * @param {Boolean} [force] 
     * @param {String} [requesterSid] 
     * @param {module:api/NodeApi~postNodeActionSysreportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NodeActionAccepted}
     */
    postNodeActionSysreport(nodename, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'nodename' is set
      if (nodename === undefined || nodename === null) {
        throw new Error("Missing the required parameter 'nodename' when calling postNodeActionSysreport");
      }

      let pathParams = {
        'nodename': nodename
      };
      let queryParams = {
        'force': opts['force'],
        'requester_sid': opts['requesterSid']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = NodeActionAccepted;
      return this.apiClient.callApi(
        '/node/name/{nodename}/action/sysreport', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postNodeClear operation.
     * @callback module:api/NodeApi~postNodeClearCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Problem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Clears errors (for example, failed) in the node monitor state.
     * @param {module:api/NodeApi~postNodeClearCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Problem}
     */
    postNodeClear(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Problem;
      return this.apiClient.callApi(
        '/node/clear', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postNodeConfigUpdate operation.
     * @callback module:api/NodeApi~postNodeConfigUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Problem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete sections, unset and set keywords in the node configuration file.
     * @param {String} nodename 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [_delete] 
     * @param {Array.<String>} [unset] 
     * @param {Array.<String>} [set] 
     * @param {module:api/NodeApi~postNodeConfigUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Problem}
     */
    postNodeConfigUpdate(nodename, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'nodename' is set
      if (nodename === undefined || nodename === null) {
        throw new Error("Missing the required parameter 'nodename' when calling postNodeConfigUpdate");
      }

      let pathParams = {
        'nodename': nodename
      };
      let queryParams = {
        'delete': this.apiClient.buildCollectionParam(opts['_delete'], 'multi'),
        'unset': this.apiClient.buildCollectionParam(opts['unset'], 'multi'),
        'set': this.apiClient.buildCollectionParam(opts['set'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Problem;
      return this.apiClient.callApi(
        '/node/name/{nodename}/config/update', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postNodeDRBDConfig operation.
     * @callback module:api/NodeApi~postNodeDRBDConfigCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send to a node a drbd configuration file fragment to install. 
     * @param {String} nodename 
     * @param {String} name the full path of the file is deduced from the name
     * @param {module:model/PostNodeDRBDConfigRequest} postNodeDRBDConfigRequest monitor
     * @param {module:api/NodeApi~postNodeDRBDConfigCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postNodeDRBDConfig(nodename, name, postNodeDRBDConfigRequest, callback) {
      let postBody = postNodeDRBDConfigRequest;
      // verify the required parameter 'nodename' is set
      if (nodename === undefined || nodename === null) {
        throw new Error("Missing the required parameter 'nodename' when calling postNodeDRBDConfig");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling postNodeDRBDConfig");
      }
      // verify the required parameter 'postNodeDRBDConfigRequest' is set
      if (postNodeDRBDConfigRequest === undefined || postNodeDRBDConfigRequest === null) {
        throw new Error("Missing the required parameter 'postNodeDRBDConfigRequest' when calling postNodeDRBDConfig");
      }

      let pathParams = {
        'nodename': nodename
      };
      let queryParams = {
        'name': name
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/node/name/{nodename}/drbd/config', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postPeerActionAbort operation.
     * @callback module:api/NodeApi~postPeerActionAbortCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrchestrationQueued} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} nodename 
     * @param {module:api/NodeApi~postPeerActionAbortCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrchestrationQueued}
     */
    postPeerActionAbort(nodename, callback) {
      let postBody = null;
      // verify the required parameter 'nodename' is set
      if (nodename === undefined || nodename === null) {
        throw new Error("Missing the required parameter 'nodename' when calling postPeerActionAbort");
      }

      let pathParams = {
        'nodename': nodename
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OrchestrationQueued;
      return this.apiClient.callApi(
        '/node/name/{nodename}/action/abort', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postPeerActionDrain operation.
     * @callback module:api/NodeApi~postPeerActionDrainCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrchestrationQueued} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} nodename 
     * @param {module:api/NodeApi~postPeerActionDrainCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrchestrationQueued}
     */
    postPeerActionDrain(nodename, callback) {
      let postBody = null;
      // verify the required parameter 'nodename' is set
      if (nodename === undefined || nodename === null) {
        throw new Error("Missing the required parameter 'nodename' when calling postPeerActionDrain");
      }

      let pathParams = {
        'nodename': nodename
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OrchestrationQueued;
      return this.apiClient.callApi(
        '/node/name/{nodename}/action/drain', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postPeerActionFreeze operation.
     * @callback module:api/NodeApi~postPeerActionFreezeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NodeActionAccepted} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Freeze the node.
     * @param {String} nodename 
     * @param {Object} opts Optional parameters
     * @param {String} [requesterSid] 
     * @param {module:api/NodeApi~postPeerActionFreezeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NodeActionAccepted}
     */
    postPeerActionFreeze(nodename, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'nodename' is set
      if (nodename === undefined || nodename === null) {
        throw new Error("Missing the required parameter 'nodename' when calling postPeerActionFreeze");
      }

      let pathParams = {
        'nodename': nodename
      };
      let queryParams = {
        'requester_sid': opts['requesterSid']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = NodeActionAccepted;
      return this.apiClient.callApi(
        '/node/name/{nodename}/action/freeze', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postPeerActionUnfreeze operation.
     * @callback module:api/NodeApi~postPeerActionUnfreezeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NodeActionAccepted} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unfreeze the node.
     * @param {String} nodename 
     * @param {Object} opts Optional parameters
     * @param {String} [requesterSid] 
     * @param {module:api/NodeApi~postPeerActionUnfreezeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NodeActionAccepted}
     */
    postPeerActionUnfreeze(nodename, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'nodename' is set
      if (nodename === undefined || nodename === null) {
        throw new Error("Missing the required parameter 'nodename' when calling postPeerActionUnfreeze");
      }

      let pathParams = {
        'nodename': nodename
      };
      let queryParams = {
        'requester_sid': opts['requesterSid']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = NodeActionAccepted;
      return this.apiClient.callApi(
        '/node/name/{nodename}/action/unfreeze', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
