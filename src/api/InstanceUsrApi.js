/**
 * test opensvc agent api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.12.19
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import InstanceActionAccepted from '../model/InstanceActionAccepted';
import InstanceItem from '../model/InstanceItem';
import Kind from '../model/Kind';
import Problem from '../model/Problem';

/**
* InstanceUsr service.
* @module api/InstanceUsrApi
* @version 3.12.19
*/
export default class InstanceUsrApi {

    /**
    * Constructs a new InstanceUsrApi. 
    * @alias module:api/InstanceUsrApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getInstance operation.
     * @callback module:api/InstanceUsrApi~getInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InstanceItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} nodename 
     * @param {String} namespace 
     * @param {module:model/Kind} kind 
     * @param {String} name 
     * @param {module:api/InstanceUsrApi~getInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InstanceItem}
     */
    getInstance(nodename, namespace, kind, name, callback) {
      let postBody = null;
      // verify the required parameter 'nodename' is set
      if (nodename === undefined || nodename === null) {
        throw new Error("Missing the required parameter 'nodename' when calling getInstance");
      }
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling getInstance");
      }
      // verify the required parameter 'kind' is set
      if (kind === undefined || kind === null) {
        throw new Error("Missing the required parameter 'kind' when calling getInstance");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling getInstance");
      }

      let pathParams = {
        'nodename': nodename,
        'namespace': namespace,
        'kind': kind,
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InstanceItem;
      return this.apiClient.callApi(
        '/node/name/{nodename}/instance/path/{namespace}/{kind}/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getInstanceLogs operation.
     * @callback module:api/InstanceUsrApi~getInstanceLogsCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Serve new logs 
     * @param {String} nodename 
     * @param {String} namespace 
     * @param {module:model/Kind} kind 
     * @param {String} name 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [filter] list of log filter
     * @param {Boolean} [follow] follow the logs
     * @param {Number} [lines] report this number of past last log entries
     * @param {module:api/InstanceUsrApi~getInstanceLogsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    getInstanceLogs(nodename, namespace, kind, name, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'nodename' is set
      if (nodename === undefined || nodename === null) {
        throw new Error("Missing the required parameter 'nodename' when calling getInstanceLogs");
      }
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling getInstanceLogs");
      }
      // verify the required parameter 'kind' is set
      if (kind === undefined || kind === null) {
        throw new Error("Missing the required parameter 'kind' when calling getInstanceLogs");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling getInstanceLogs");
      }

      let pathParams = {
        'nodename': nodename,
        'namespace': namespace,
        'kind': kind,
        'name': name
      };
      let queryParams = {
        'filter': this.apiClient.buildCollectionParam(opts['filter'], 'multi'),
        'follow': opts['follow'],
        'lines': opts['lines']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['text/event-stream', 'application/json'];
      let returnType = File;
      return this.apiClient.callApi(
        '/node/name/{nodename}/object/path/{namespace}/{kind}/{name}/log', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postInstanceActionDelete operation.
     * @callback module:api/InstanceUsrApi~postInstanceActionDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InstanceActionAccepted} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the object instance.
     * @param {String} nodename 
     * @param {String} namespace 
     * @param {module:model/Kind} kind 
     * @param {String} name 
     * @param {Object} opts Optional parameters
     * @param {String} [requesterSid] 
     * @param {module:api/InstanceUsrApi~postInstanceActionDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InstanceActionAccepted}
     */
    postInstanceActionDelete(nodename, namespace, kind, name, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'nodename' is set
      if (nodename === undefined || nodename === null) {
        throw new Error("Missing the required parameter 'nodename' when calling postInstanceActionDelete");
      }
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling postInstanceActionDelete");
      }
      // verify the required parameter 'kind' is set
      if (kind === undefined || kind === null) {
        throw new Error("Missing the required parameter 'kind' when calling postInstanceActionDelete");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling postInstanceActionDelete");
      }

      let pathParams = {
        'nodename': nodename,
        'namespace': namespace,
        'kind': kind,
        'name': name
      };
      let queryParams = {
        'requester_sid': opts['requesterSid']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InstanceActionAccepted;
      return this.apiClient.callApi(
        '/node/name/{nodename}/instance/path/{namespace}/{kind}/{name}/action/delete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postInstanceClear operation.
     * @callback module:api/InstanceUsrApi~postInstanceClearCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Clear an error (\"start failed\" for example) in the instance monitor state. 
     * @param {String} nodename 
     * @param {String} namespace 
     * @param {module:model/Kind} kind 
     * @param {String} name 
     * @param {module:api/InstanceUsrApi~postInstanceClearCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postInstanceClear(nodename, namespace, kind, name, callback) {
      let postBody = null;
      // verify the required parameter 'nodename' is set
      if (nodename === undefined || nodename === null) {
        throw new Error("Missing the required parameter 'nodename' when calling postInstanceClear");
      }
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling postInstanceClear");
      }
      // verify the required parameter 'kind' is set
      if (kind === undefined || kind === null) {
        throw new Error("Missing the required parameter 'kind' when calling postInstanceClear");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling postInstanceClear");
      }

      let pathParams = {
        'nodename': nodename,
        'namespace': namespace,
        'kind': kind,
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/node/name/{nodename}/instance/path/{namespace}/{kind}/{name}/clear', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
