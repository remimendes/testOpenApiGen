/**
 * test opensvc agent api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.12.19
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import InstanceStatus from '../model/InstanceStatus';
import Kind from '../model/Kind';
import PostInstanceProgress from '../model/PostInstanceProgress';
import Problem from '../model/Problem';

/**
* Internal service.
* @module api/InternalApi
* @version 3.12.19
*/
export default class InternalApi {

    /**
    * Constructs a new InternalApi. 
    * @alias module:api/InternalApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the postDaemonJoin operation.
     * @callback module:api/InternalApi~postDaemonJoinCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a new node to the cluster of the requested api node.  The requester must be granted the 'root' or 'join' roles.  The processing of the join request is asynchronous.  The HTTP response is sent when the join request event has been published. This event is labeled node=<api_node>.  To follow the processing of the join request, use the following event filters, - JoinSuccess,node=<api_node>,added=<node> (the new node has been added to cluster nodes) - JoinIgnored,node=<api_node>,join-node=<node> (the new node was already a cluster node) - JoinError,node=<api_node>,join-node=<node> (an error occur during update cluster node list) 
     * @param {String} node The node to add to cluster nodes
     * @param {module:api/InternalApi~postDaemonJoinCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postDaemonJoin(node, callback) {
      let postBody = null;
      // verify the required parameter 'node' is set
      if (node === undefined || node === null) {
        throw new Error("Missing the required parameter 'node' when calling postDaemonJoin");
      }

      let pathParams = {
      };
      let queryParams = {
        'node': node
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/daemon/action/join', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postDaemonLeave operation.
     * @callback module:api/InternalApi~postDaemonLeaveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Register a leave request to remove a cluster node member. The requester must be granted the 'root' or 'Leave' roles.  The processing of the leave request is asynchronous.  The HTTP response is sent when the leave request event has been published. This event is labeled node=<api_node>.  To follow the processing of the leave request, use the following event filters, - LeaveSuccess,node=<api_node>,removed=<node> (node has been removed to cluster nodes) - LeaveIgnored,node=<api_node>,leave-node=<node> (node is not a cluster node) - LeaveError,node=<api_node>,leave-node=<node> (an error occur during update cluster node list) 
     * @param {String} node The leaving cluster node
     * @param {module:api/InternalApi~postDaemonLeaveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postDaemonLeave(node, callback) {
      let postBody = null;
      // verify the required parameter 'node' is set
      if (node === undefined || node === null) {
        throw new Error("Missing the required parameter 'node' when calling postDaemonLeave");
      }

      let pathParams = {
      };
      let queryParams = {
        'node': node
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/daemon/action/leave', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postInstanceProgress operation.
     * @callback module:api/InternalApi~postInstanceProgressCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} namespace 
     * @param {module:model/Kind} kind 
     * @param {String} name 
     * @param {module:model/PostInstanceProgress} postInstanceProgress Change the instance monitor state to reflect the progress of actions the daemon did not started.
     * @param {module:api/InternalApi~postInstanceProgressCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postInstanceProgress(namespace, kind, name, postInstanceProgress, callback) {
      let postBody = postInstanceProgress;
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling postInstanceProgress");
      }
      // verify the required parameter 'kind' is set
      if (kind === undefined || kind === null) {
        throw new Error("Missing the required parameter 'kind' when calling postInstanceProgress");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling postInstanceProgress");
      }
      // verify the required parameter 'postInstanceProgress' is set
      if (postInstanceProgress === undefined || postInstanceProgress === null) {
        throw new Error("Missing the required parameter 'postInstanceProgress' when calling postInstanceProgress");
      }

      let pathParams = {
        'namespace': namespace,
        'kind': kind,
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/instance/path/{namespace}/{kind}/{name}/progress', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postInstanceStatus operation.
     * @callback module:api/InternalApi~postInstanceStatusCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} namespace 
     * @param {module:model/Kind} kind 
     * @param {String} name 
     * @param {module:model/InstanceStatus} instanceStatus post object status
     * @param {module:api/InternalApi~postInstanceStatusCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postInstanceStatus(namespace, kind, name, instanceStatus, callback) {
      let postBody = instanceStatus;
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling postInstanceStatus");
      }
      // verify the required parameter 'kind' is set
      if (kind === undefined || kind === null) {
        throw new Error("Missing the required parameter 'kind' when calling postInstanceStatus");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling postInstanceStatus");
      }
      // verify the required parameter 'instanceStatus' is set
      if (instanceStatus === undefined || instanceStatus === null) {
        throw new Error("Missing the required parameter 'instanceStatus' when calling postInstanceStatus");
      }

      let pathParams = {
        'namespace': namespace,
        'kind': kind,
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/instance/path/{namespace}/{kind}/{name}/status', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
