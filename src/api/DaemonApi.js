/**
 * test opensvc agent api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.12.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DaemonStatus from '../model/DaemonStatus';
import PostDaemonLogsControl from '../model/PostDaemonLogsControl';
import PostDaemonSubAction from '../model/PostDaemonSubAction';
import Problem from '../model/Problem';

/**
* Daemon service.
* @module api/DaemonApi
* @version 3.12.9
*/
export default class DaemonApi {

    /**
    * Constructs a new DaemonApi. 
    * @alias module:api/DaemonApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getDaemonEvents operation.
     * @callback module:api/DaemonApi~getDaemonEventsCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Listen node daemon events 
     * @param {String} nodename 
     * @param {Object} opts Optional parameters
     * @param {String} [duration] max duration
     * @param {Number} [limit] limit items count
     * @param {Array.<String>} [filter] list of event filter
     * @param {String} [selector] selector
     * @param {module:api/DaemonApi~getDaemonEventsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    getDaemonEvents(nodename, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'nodename' is set
      if (nodename === undefined || nodename === null) {
        throw new Error("Missing the required parameter 'nodename' when calling getDaemonEvents");
      }

      let pathParams = {
        'nodename': nodename
      };
      let queryParams = {
        'duration': opts['duration'],
        'limit': opts['limit'],
        'filter': this.apiClient.buildCollectionParam(opts['filter'], 'multi'),
        'selector': opts['selector']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['text/event-stream', 'application/json'];
      let returnType = File;
      return this.apiClient.callApi(
        '/node/name/{nodename}/daemon/event', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDaemonRunning operation.
     * @callback module:api/DaemonApi~getDaemonRunningCallback
     * @param {String} error Error message, if any.
     * @param {Boolean} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DaemonApi~getDaemonRunningCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Boolean}
     */
    getDaemonRunning(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Boolean';
      return this.apiClient.callApi(
        '/daemon/running', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDaemonStatus operation.
     * @callback module:api/DaemonApi~getDaemonStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DaemonStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} [namespace] namespace
     * @param {String} [selector] selector
     * @param {module:api/DaemonApi~getDaemonStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DaemonStatus}
     */
    getDaemonStatus(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'namespace': opts['namespace'],
        'selector': opts['selector']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DaemonStatus;
      return this.apiClient.callApi(
        '/daemon/status', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postDaemonLogsControl operation.
     * @callback module:api/DaemonApi~postDaemonLogsControlCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Problem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/PostDaemonLogsControl} postDaemonLogsControl set daeffmn log levelmkkk
     * @param {module:api/DaemonApi~postDaemonLogsControlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Problem}
     */
    postDaemonLogsControl(postDaemonLogsControl, callback) {
      let postBody = postDaemonLogsControl;
      // verify the required parameter 'postDaemonLogsControl' is set
      if (postDaemonLogsControl === undefined || postDaemonLogsControl === null) {
        throw new Error("Missing the required parameter 'postDaemonLogsControl' when calling postDaemonLogsControl");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Problem;
      return this.apiClient.callApi(
        '/daemon/log/control', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postDaemonRestart operation.
     * @callback module:api/DaemonApi~postDaemonRestartCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Problem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Restart the daemon on this node.  The node svc and vol instances do not change state.  The peer nodes are notified of our maintenance state so they will not try to takeover services during the restart. 
     * @param {String} nodename 
     * @param {module:api/DaemonApi~postDaemonRestartCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Problem}
     */
    postDaemonRestart(nodename, callback) {
      let postBody = null;
      // verify the required parameter 'nodename' is set
      if (nodename === undefined || nodename === null) {
        throw new Error("Missing the required parameter 'nodename' when calling postDaemonRestart");
      }

      let pathParams = {
        'nodename': nodename
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Problem;
      return this.apiClient.callApi(
        '/node/name/{nodename}/daemon/action/restart', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postDaemonShutdown operation.
     * @callback module:api/DaemonApi~postDaemonShutdownCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Problem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Shut down all the node svc and vol instances, then stop the daemon.  Peer nodes are not notified of a maintenance period, so they will try to takeover services as soon as their instance on the shutdown daemon's node is down. 
     * @param {String} nodename 
     * @param {Object} opts Optional parameters
     * @param {String} [duration] max duration
     * @param {module:api/DaemonApi~postDaemonShutdownCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Problem}
     */
    postDaemonShutdown(nodename, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'nodename' is set
      if (nodename === undefined || nodename === null) {
        throw new Error("Missing the required parameter 'nodename' when calling postDaemonShutdown");
      }

      let pathParams = {
        'nodename': nodename
      };
      let queryParams = {
        'duration': opts['duration']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Problem;
      return this.apiClient.callApi(
        '/node/name/{nodename}/daemon/action/shutdown', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postDaemonStop operation.
     * @callback module:api/DaemonApi~postDaemonStopCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Problem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stop the daemon.  The node svc and vol instances do not change state. The peer nodes are notified of our maintenance state so they will not takeover services until the maintenance_grace_period is expired. 
     * @param {String} nodename 
     * @param {module:api/DaemonApi~postDaemonStopCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Problem}
     */
    postDaemonStop(nodename, callback) {
      let postBody = null;
      // verify the required parameter 'nodename' is set
      if (nodename === undefined || nodename === null) {
        throw new Error("Missing the required parameter 'nodename' when calling postDaemonStop");
      }

      let pathParams = {
        'nodename': nodename
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Problem;
      return this.apiClient.callApi(
        '/node/name/{nodename}/daemon/action/stop', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postDaemonSubAction operation.
     * @callback module:api/DaemonApi~postDaemonSubActionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Problem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/PostDaemonSubAction} postDaemonSubAction action on daemon sub components
     * @param {module:api/DaemonApi~postDaemonSubActionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Problem}
     */
    postDaemonSubAction(postDaemonSubAction, callback) {
      let postBody = postDaemonSubAction;
      // verify the required parameter 'postDaemonSubAction' is set
      if (postDaemonSubAction === undefined || postDaemonSubAction === null) {
        throw new Error("Missing the required parameter 'postDaemonSubAction' when calling postDaemonSubAction");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Problem;
      return this.apiClient.callApi(
        '/daemon/sub/action', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
