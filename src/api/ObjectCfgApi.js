/**
 * opensvc agent api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.12.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import KeywordList from '../model/KeywordList';
import Kind from '../model/Kind';
import ObjectConfig from '../model/ObjectConfig';
import ObjectConfigFile from '../model/ObjectConfigFile';
import ObjectItem from '../model/ObjectItem';
import OrchestrationQueued from '../model/OrchestrationQueued';
import Problem from '../model/Problem';

/**
* ObjectCfg service.
* @module api/ObjectCfgApi
* @version 3.12.2
*/
export default class ObjectCfgApi {

    /**
    * Constructs a new ObjectCfgApi. 
    * @alias module:api/ObjectCfgApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getObject operation.
     * @callback module:api/ObjectCfgApi~getObjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ObjectItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} namespace 
     * @param {module:model/Kind} kind 
     * @param {String} name 
     * @param {module:api/ObjectCfgApi~getObjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ObjectItem}
     */
    getObject(namespace, kind, name, callback) {
      let postBody = null;
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling getObject");
      }
      // verify the required parameter 'kind' is set
      if (kind === undefined || kind === null) {
        throw new Error("Missing the required parameter 'kind' when calling getObject");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling getObject");
      }

      let pathParams = {
        'namespace': namespace,
        'kind': kind,
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ObjectItem;
      return this.apiClient.callApi(
        '/object/path/{namespace}/{kind}/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getObjectConfig operation.
     * @callback module:api/ObjectCfgApi~getObjectConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ObjectConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} namespace 
     * @param {module:model/Kind} kind 
     * @param {String} name 
     * @param {Object} opts Optional parameters
     * @param {Boolean} [evaluate] evaluate
     * @param {String} [impersonate] impersonate the evaluation as node
     * @param {module:api/ObjectCfgApi~getObjectConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ObjectConfig}
     */
    getObjectConfig(namespace, kind, name, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling getObjectConfig");
      }
      // verify the required parameter 'kind' is set
      if (kind === undefined || kind === null) {
        throw new Error("Missing the required parameter 'kind' when calling getObjectConfig");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling getObjectConfig");
      }

      let pathParams = {
        'namespace': namespace,
        'kind': kind,
        'name': name
      };
      let queryParams = {
        'evaluate': opts['evaluate'],
        'impersonate': opts['impersonate']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ObjectConfig;
      return this.apiClient.callApi(
        '/object/path/{namespace}/{kind}/{name}/config', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getObjectConfigFile operation.
     * @callback module:api/ObjectCfgApi~getObjectConfigFileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ObjectConfigFile} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} namespace 
     * @param {module:model/Kind} kind 
     * @param {String} name 
     * @param {module:api/ObjectCfgApi~getObjectConfigFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ObjectConfigFile}
     */
    getObjectConfigFile(namespace, kind, name, callback) {
      let postBody = null;
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling getObjectConfigFile");
      }
      // verify the required parameter 'kind' is set
      if (kind === undefined || kind === null) {
        throw new Error("Missing the required parameter 'kind' when calling getObjectConfigFile");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling getObjectConfigFile");
      }

      let pathParams = {
        'namespace': namespace,
        'kind': kind,
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ObjectConfigFile;
      return this.apiClient.callApi(
        '/object/path/{namespace}/{kind}/{name}/config/file', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getObjectConfigGet operation.
     * @callback module:api/ObjectCfgApi~getObjectConfigGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/KeywordList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get or evaluate a keyword in the object configuration file.
     * @param {String} namespace 
     * @param {module:model/Kind} kind 
     * @param {String} name 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [kw] 
     * @param {Boolean} [evaluate] 
     * @param {String} [impersonate] 
     * @param {module:api/ObjectCfgApi~getObjectConfigGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/KeywordList}
     */
    getObjectConfigGet(namespace, kind, name, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling getObjectConfigGet");
      }
      // verify the required parameter 'kind' is set
      if (kind === undefined || kind === null) {
        throw new Error("Missing the required parameter 'kind' when calling getObjectConfigGet");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling getObjectConfigGet");
      }

      let pathParams = {
        'namespace': namespace,
        'kind': kind,
        'name': name
      };
      let queryParams = {
        'kw': this.apiClient.buildCollectionParam(opts['kw'], 'multi'),
        'evaluate': opts['evaluate'],
        'impersonate': opts['impersonate']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = KeywordList;
      return this.apiClient.callApi(
        '/object/path/{namespace}/{kind}/{name}/config/get', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postObjectActionAbort operation.
     * @callback module:api/ObjectCfgApi~postObjectActionAbortCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrchestrationQueued} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} namespace 
     * @param {module:model/Kind} kind 
     * @param {String} name 
     * @param {module:api/ObjectCfgApi~postObjectActionAbortCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrchestrationQueued}
     */
    postObjectActionAbort(namespace, kind, name, callback) {
      let postBody = null;
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling postObjectActionAbort");
      }
      // verify the required parameter 'kind' is set
      if (kind === undefined || kind === null) {
        throw new Error("Missing the required parameter 'kind' when calling postObjectActionAbort");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling postObjectActionAbort");
      }

      let pathParams = {
        'namespace': namespace,
        'kind': kind,
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OrchestrationQueued;
      return this.apiClient.callApi(
        '/object/path/{namespace}/{kind}/{name}/action/abort', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postObjectActionDelete operation.
     * @callback module:api/ObjectCfgApi~postObjectActionDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrchestrationQueued} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} namespace 
     * @param {module:model/Kind} kind 
     * @param {String} name 
     * @param {module:api/ObjectCfgApi~postObjectActionDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrchestrationQueued}
     */
    postObjectActionDelete(namespace, kind, name, callback) {
      let postBody = null;
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling postObjectActionDelete");
      }
      // verify the required parameter 'kind' is set
      if (kind === undefined || kind === null) {
        throw new Error("Missing the required parameter 'kind' when calling postObjectActionDelete");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling postObjectActionDelete");
      }

      let pathParams = {
        'namespace': namespace,
        'kind': kind,
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OrchestrationQueued;
      return this.apiClient.callApi(
        '/object/path/{namespace}/{kind}/{name}/action/delete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postObjectConfigFile operation.
     * @callback module:api/ObjectCfgApi~postObjectConfigFileCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} namespace 
     * @param {module:model/Kind} kind 
     * @param {String} name 
     * @param {Object} opts Optional parameters
     * @param {module:model/ObjectConfigFile} [objectConfigFile] OK
     * @param {module:api/ObjectCfgApi~postObjectConfigFileCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postObjectConfigFile(namespace, kind, name, opts, callback) {
      opts = opts || {};
      let postBody = opts['objectConfigFile'];
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling postObjectConfigFile");
      }
      // verify the required parameter 'kind' is set
      if (kind === undefined || kind === null) {
        throw new Error("Missing the required parameter 'kind' when calling postObjectConfigFile");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling postObjectConfigFile");
      }

      let pathParams = {
        'namespace': namespace,
        'kind': kind,
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/object/path/{namespace}/{kind}/{name}/config/file', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postObjectConfigUpdate operation.
     * @callback module:api/ObjectCfgApi~postObjectConfigUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Problem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete sections, unset and set keywords in the object configuration file.
     * @param {String} namespace 
     * @param {module:model/Kind} kind 
     * @param {String} name 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [_delete] 
     * @param {Array.<String>} [unset] 
     * @param {Array.<String>} [set] 
     * @param {module:api/ObjectCfgApi~postObjectConfigUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Problem}
     */
    postObjectConfigUpdate(namespace, kind, name, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling postObjectConfigUpdate");
      }
      // verify the required parameter 'kind' is set
      if (kind === undefined || kind === null) {
        throw new Error("Missing the required parameter 'kind' when calling postObjectConfigUpdate");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling postObjectConfigUpdate");
      }

      let pathParams = {
        'namespace': namespace,
        'kind': kind,
        'name': name
      };
      let queryParams = {
        'delete': this.apiClient.buildCollectionParam(opts['_delete'], 'multi'),
        'unset': this.apiClient.buildCollectionParam(opts['unset'], 'multi'),
        'set': this.apiClient.buildCollectionParam(opts['set'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Problem;
      return this.apiClient.callApi(
        '/object/path/{namespace}/{kind}/{name}/config/update', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putObjectConfigFile operation.
     * @callback module:api/ObjectCfgApi~putObjectConfigFileCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} namespace 
     * @param {module:model/Kind} kind 
     * @param {String} name 
     * @param {Object} opts Optional parameters
     * @param {module:model/ObjectConfigFile} [objectConfigFile] OK
     * @param {module:api/ObjectCfgApi~putObjectConfigFileCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putObjectConfigFile(namespace, kind, name, opts, callback) {
      opts = opts || {};
      let postBody = opts['objectConfigFile'];
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling putObjectConfigFile");
      }
      // verify the required parameter 'kind' is set
      if (kind === undefined || kind === null) {
        throw new Error("Missing the required parameter 'kind' when calling putObjectConfigFile");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling putObjectConfigFile");
      }

      let pathParams = {
        'namespace': namespace,
        'kind': kind,
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/object/path/{namespace}/{kind}/{name}/config/file', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
