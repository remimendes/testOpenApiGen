/**
 * opensvc agent api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.12.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import InstanceActionAccepted from '../model/InstanceActionAccepted';
import InstanceItem from '../model/InstanceItem';
import Kind from '../model/Kind';
import Problem from '../model/Problem';
import ScheduleList from '../model/ScheduleList';

/**
* InstanceSvc service.
* @module api/InstanceSvcApi
* @version 3.12.2
*/
export default class InstanceSvcApi {

    /**
    * Constructs a new InstanceSvcApi. 
    * @alias module:api/InstanceSvcApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getInstance operation.
     * @callback module:api/InstanceSvcApi~getInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InstanceItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} nodename 
     * @param {String} namespace 
     * @param {module:model/Kind} kind 
     * @param {String} name 
     * @param {module:api/InstanceSvcApi~getInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InstanceItem}
     */
    getInstance(nodename, namespace, kind, name, callback) {
      let postBody = null;
      // verify the required parameter 'nodename' is set
      if (nodename === undefined || nodename === null) {
        throw new Error("Missing the required parameter 'nodename' when calling getInstance");
      }
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling getInstance");
      }
      // verify the required parameter 'kind' is set
      if (kind === undefined || kind === null) {
        throw new Error("Missing the required parameter 'kind' when calling getInstance");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling getInstance");
      }

      let pathParams = {
        'nodename': nodename,
        'namespace': namespace,
        'kind': kind,
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InstanceItem;
      return this.apiClient.callApi(
        '/node/name/{nodename}/instance/path/{namespace}/{kind}/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getInstanceLogs operation.
     * @callback module:api/InstanceSvcApi~getInstanceLogsCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Serve new logs 
     * @param {String} nodename 
     * @param {String} namespace 
     * @param {module:model/Kind} kind 
     * @param {String} name 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [filter] list of log filter
     * @param {Boolean} [follow] follow the logs
     * @param {Number} [lines] report this number of past last log entries
     * @param {module:api/InstanceSvcApi~getInstanceLogsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    getInstanceLogs(nodename, namespace, kind, name, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'nodename' is set
      if (nodename === undefined || nodename === null) {
        throw new Error("Missing the required parameter 'nodename' when calling getInstanceLogs");
      }
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling getInstanceLogs");
      }
      // verify the required parameter 'kind' is set
      if (kind === undefined || kind === null) {
        throw new Error("Missing the required parameter 'kind' when calling getInstanceLogs");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling getInstanceLogs");
      }

      let pathParams = {
        'nodename': nodename,
        'namespace': namespace,
        'kind': kind,
        'name': name
      };
      let queryParams = {
        'filter': this.apiClient.buildCollectionParam(opts['filter'], 'multi'),
        'follow': opts['follow'],
        'lines': opts['lines']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['text/event-stream', 'application/json'];
      let returnType = File;
      return this.apiClient.callApi(
        '/node/name/{nodename}/object/path/{namespace}/{kind}/{name}/log', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getObjectSchedule operation.
     * @callback module:api/InstanceSvcApi~getObjectScheduleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScheduleList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the schedule table of the object. 
     * @param {String} nodename 
     * @param {String} namespace 
     * @param {module:model/Kind} kind 
     * @param {String} name 
     * @param {module:api/InstanceSvcApi~getObjectScheduleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScheduleList}
     */
    getObjectSchedule(nodename, namespace, kind, name, callback) {
      let postBody = null;
      // verify the required parameter 'nodename' is set
      if (nodename === undefined || nodename === null) {
        throw new Error("Missing the required parameter 'nodename' when calling getObjectSchedule");
      }
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling getObjectSchedule");
      }
      // verify the required parameter 'kind' is set
      if (kind === undefined || kind === null) {
        throw new Error("Missing the required parameter 'kind' when calling getObjectSchedule");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling getObjectSchedule");
      }

      let pathParams = {
        'nodename': nodename,
        'namespace': namespace,
        'kind': kind,
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ScheduleList;
      return this.apiClient.callApi(
        '/node/name/{nodename}/object/path/{namespace}/{kind}/{name}/schedule', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postInstanceActionBoot operation.
     * @callback module:api/InstanceSvcApi~postInstanceActionBootCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InstanceActionAccepted} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Boot the object instance.
     * @param {String} nodename 
     * @param {String} namespace 
     * @param {module:model/Kind} kind 
     * @param {String} name 
     * @param {Object} opts Optional parameters
     * @param {String} [requesterSid] 
     * @param {String} [rid] 
     * @param {String} [subset] 
     * @param {String} [tag] 
     * @param {String} [to] 
     * @param {module:api/InstanceSvcApi~postInstanceActionBootCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InstanceActionAccepted}
     */
    postInstanceActionBoot(nodename, namespace, kind, name, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'nodename' is set
      if (nodename === undefined || nodename === null) {
        throw new Error("Missing the required parameter 'nodename' when calling postInstanceActionBoot");
      }
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling postInstanceActionBoot");
      }
      // verify the required parameter 'kind' is set
      if (kind === undefined || kind === null) {
        throw new Error("Missing the required parameter 'kind' when calling postInstanceActionBoot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling postInstanceActionBoot");
      }

      let pathParams = {
        'nodename': nodename,
        'namespace': namespace,
        'kind': kind,
        'name': name
      };
      let queryParams = {
        'requester_sid': opts['requesterSid'],
        'rid': opts['rid'],
        'subset': opts['subset'],
        'tag': opts['tag'],
        'to': opts['to']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InstanceActionAccepted;
      return this.apiClient.callApi(
        '/node/name/{nodename}/instance/path/{namespace}/{kind}/{name}/action/boot', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postInstanceActionDelete operation.
     * @callback module:api/InstanceSvcApi~postInstanceActionDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InstanceActionAccepted} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the object instance.
     * @param {String} nodename 
     * @param {String} namespace 
     * @param {module:model/Kind} kind 
     * @param {String} name 
     * @param {Object} opts Optional parameters
     * @param {String} [requesterSid] 
     * @param {module:api/InstanceSvcApi~postInstanceActionDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InstanceActionAccepted}
     */
    postInstanceActionDelete(nodename, namespace, kind, name, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'nodename' is set
      if (nodename === undefined || nodename === null) {
        throw new Error("Missing the required parameter 'nodename' when calling postInstanceActionDelete");
      }
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling postInstanceActionDelete");
      }
      // verify the required parameter 'kind' is set
      if (kind === undefined || kind === null) {
        throw new Error("Missing the required parameter 'kind' when calling postInstanceActionDelete");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling postInstanceActionDelete");
      }

      let pathParams = {
        'nodename': nodename,
        'namespace': namespace,
        'kind': kind,
        'name': name
      };
      let queryParams = {
        'requester_sid': opts['requesterSid']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InstanceActionAccepted;
      return this.apiClient.callApi(
        '/node/name/{nodename}/instance/path/{namespace}/{kind}/{name}/action/delete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postInstanceActionFreeze operation.
     * @callback module:api/InstanceSvcApi~postInstanceActionFreezeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InstanceActionAccepted} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Freeze the object instance.
     * @param {String} nodename 
     * @param {String} namespace 
     * @param {module:model/Kind} kind 
     * @param {String} name 
     * @param {Object} opts Optional parameters
     * @param {String} [requesterSid] 
     * @param {module:api/InstanceSvcApi~postInstanceActionFreezeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InstanceActionAccepted}
     */
    postInstanceActionFreeze(nodename, namespace, kind, name, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'nodename' is set
      if (nodename === undefined || nodename === null) {
        throw new Error("Missing the required parameter 'nodename' when calling postInstanceActionFreeze");
      }
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling postInstanceActionFreeze");
      }
      // verify the required parameter 'kind' is set
      if (kind === undefined || kind === null) {
        throw new Error("Missing the required parameter 'kind' when calling postInstanceActionFreeze");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling postInstanceActionFreeze");
      }

      let pathParams = {
        'nodename': nodename,
        'namespace': namespace,
        'kind': kind,
        'name': name
      };
      let queryParams = {
        'requester_sid': opts['requesterSid']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InstanceActionAccepted;
      return this.apiClient.callApi(
        '/node/name/{nodename}/instance/path/{namespace}/{kind}/{name}/action/freeze', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postInstanceActionProvision operation.
     * @callback module:api/InstanceSvcApi~postInstanceActionProvisionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InstanceActionAccepted} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Provision the object instance.
     * @param {String} nodename 
     * @param {String} namespace 
     * @param {module:model/Kind} kind 
     * @param {String} name 
     * @param {Object} opts Optional parameters
     * @param {Boolean} [disableRollback] 
     * @param {Boolean} [force] 
     * @param {Boolean} [leader] 
     * @param {String} [requesterSid] 
     * @param {String} [rid] 
     * @param {String} [subset] 
     * @param {String} [tag] 
     * @param {String} [to] 
     * @param {module:api/InstanceSvcApi~postInstanceActionProvisionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InstanceActionAccepted}
     */
    postInstanceActionProvision(nodename, namespace, kind, name, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'nodename' is set
      if (nodename === undefined || nodename === null) {
        throw new Error("Missing the required parameter 'nodename' when calling postInstanceActionProvision");
      }
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling postInstanceActionProvision");
      }
      // verify the required parameter 'kind' is set
      if (kind === undefined || kind === null) {
        throw new Error("Missing the required parameter 'kind' when calling postInstanceActionProvision");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling postInstanceActionProvision");
      }

      let pathParams = {
        'nodename': nodename,
        'namespace': namespace,
        'kind': kind,
        'name': name
      };
      let queryParams = {
        'disable_rollback': opts['disableRollback'],
        'force': opts['force'],
        'leader': opts['leader'],
        'requester_sid': opts['requesterSid'],
        'rid': opts['rid'],
        'subset': opts['subset'],
        'tag': opts['tag'],
        'to': opts['to']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InstanceActionAccepted;
      return this.apiClient.callApi(
        '/node/name/{nodename}/instance/path/{namespace}/{kind}/{name}/action/provision', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postInstanceActionShutdown operation.
     * @callback module:api/InstanceSvcApi~postInstanceActionShutdownCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InstanceActionAccepted} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Shutdown the object instance.
     * @param {String} nodename 
     * @param {String} namespace 
     * @param {module:model/Kind} kind 
     * @param {String} name 
     * @param {Object} opts Optional parameters
     * @param {Boolean} [force] 
     * @param {String} [requesterSid] 
     * @param {String} [rid] 
     * @param {String} [subset] 
     * @param {String} [tag] 
     * @param {String} [to] 
     * @param {module:api/InstanceSvcApi~postInstanceActionShutdownCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InstanceActionAccepted}
     */
    postInstanceActionShutdown(nodename, namespace, kind, name, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'nodename' is set
      if (nodename === undefined || nodename === null) {
        throw new Error("Missing the required parameter 'nodename' when calling postInstanceActionShutdown");
      }
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling postInstanceActionShutdown");
      }
      // verify the required parameter 'kind' is set
      if (kind === undefined || kind === null) {
        throw new Error("Missing the required parameter 'kind' when calling postInstanceActionShutdown");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling postInstanceActionShutdown");
      }

      let pathParams = {
        'nodename': nodename,
        'namespace': namespace,
        'kind': kind,
        'name': name
      };
      let queryParams = {
        'force': opts['force'],
        'requester_sid': opts['requesterSid'],
        'rid': opts['rid'],
        'subset': opts['subset'],
        'tag': opts['tag'],
        'to': opts['to']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InstanceActionAccepted;
      return this.apiClient.callApi(
        '/node/name/{nodename}/instance/path/{namespace}/{kind}/{name}/action/shutdown', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postInstanceActionStart operation.
     * @callback module:api/InstanceSvcApi~postInstanceActionStartCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InstanceActionAccepted} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Start the object instance.
     * @param {String} nodename 
     * @param {String} namespace 
     * @param {module:model/Kind} kind 
     * @param {String} name 
     * @param {Object} opts Optional parameters
     * @param {Boolean} [disableRollback] 
     * @param {Boolean} [force] 
     * @param {String} [requesterSid] 
     * @param {String} [rid] 
     * @param {String} [subset] 
     * @param {String} [tag] 
     * @param {String} [to] 
     * @param {module:api/InstanceSvcApi~postInstanceActionStartCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InstanceActionAccepted}
     */
    postInstanceActionStart(nodename, namespace, kind, name, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'nodename' is set
      if (nodename === undefined || nodename === null) {
        throw new Error("Missing the required parameter 'nodename' when calling postInstanceActionStart");
      }
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling postInstanceActionStart");
      }
      // verify the required parameter 'kind' is set
      if (kind === undefined || kind === null) {
        throw new Error("Missing the required parameter 'kind' when calling postInstanceActionStart");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling postInstanceActionStart");
      }

      let pathParams = {
        'nodename': nodename,
        'namespace': namespace,
        'kind': kind,
        'name': name
      };
      let queryParams = {
        'disable_rollback': opts['disableRollback'],
        'force': opts['force'],
        'requester_sid': opts['requesterSid'],
        'rid': opts['rid'],
        'subset': opts['subset'],
        'tag': opts['tag'],
        'to': opts['to']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InstanceActionAccepted;
      return this.apiClient.callApi(
        '/node/name/{nodename}/instance/path/{namespace}/{kind}/{name}/action/start', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postInstanceActionStartStandby operation.
     * @callback module:api/InstanceSvcApi~postInstanceActionStartStandbyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InstanceActionAccepted} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Start the object instance in standby mode.
     * @param {String} nodename 
     * @param {String} namespace 
     * @param {module:model/Kind} kind 
     * @param {String} name 
     * @param {Object} opts Optional parameters
     * @param {Boolean} [disableRollback] 
     * @param {Boolean} [force] 
     * @param {String} [requesterSid] 
     * @param {String} [rid] 
     * @param {String} [subset] 
     * @param {String} [tag] 
     * @param {String} [to] 
     * @param {module:api/InstanceSvcApi~postInstanceActionStartStandbyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InstanceActionAccepted}
     */
    postInstanceActionStartStandby(nodename, namespace, kind, name, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'nodename' is set
      if (nodename === undefined || nodename === null) {
        throw new Error("Missing the required parameter 'nodename' when calling postInstanceActionStartStandby");
      }
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling postInstanceActionStartStandby");
      }
      // verify the required parameter 'kind' is set
      if (kind === undefined || kind === null) {
        throw new Error("Missing the required parameter 'kind' when calling postInstanceActionStartStandby");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling postInstanceActionStartStandby");
      }

      let pathParams = {
        'nodename': nodename,
        'namespace': namespace,
        'kind': kind,
        'name': name
      };
      let queryParams = {
        'disable_rollback': opts['disableRollback'],
        'force': opts['force'],
        'requester_sid': opts['requesterSid'],
        'rid': opts['rid'],
        'subset': opts['subset'],
        'tag': opts['tag'],
        'to': opts['to']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InstanceActionAccepted;
      return this.apiClient.callApi(
        '/node/name/{nodename}/instance/path/{namespace}/{kind}/{name}/action/startstandby', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postInstanceActionStop operation.
     * @callback module:api/InstanceSvcApi~postInstanceActionStopCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InstanceActionAccepted} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stop the object instance.
     * @param {String} nodename 
     * @param {String} namespace 
     * @param {module:model/Kind} kind 
     * @param {String} name 
     * @param {Object} opts Optional parameters
     * @param {Boolean} [force] 
     * @param {String} [requesterSid] 
     * @param {String} [rid] 
     * @param {String} [subset] 
     * @param {String} [tag] 
     * @param {String} [to] 
     * @param {module:api/InstanceSvcApi~postInstanceActionStopCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InstanceActionAccepted}
     */
    postInstanceActionStop(nodename, namespace, kind, name, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'nodename' is set
      if (nodename === undefined || nodename === null) {
        throw new Error("Missing the required parameter 'nodename' when calling postInstanceActionStop");
      }
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling postInstanceActionStop");
      }
      // verify the required parameter 'kind' is set
      if (kind === undefined || kind === null) {
        throw new Error("Missing the required parameter 'kind' when calling postInstanceActionStop");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling postInstanceActionStop");
      }

      let pathParams = {
        'nodename': nodename,
        'namespace': namespace,
        'kind': kind,
        'name': name
      };
      let queryParams = {
        'force': opts['force'],
        'requester_sid': opts['requesterSid'],
        'rid': opts['rid'],
        'subset': opts['subset'],
        'tag': opts['tag'],
        'to': opts['to']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InstanceActionAccepted;
      return this.apiClient.callApi(
        '/node/name/{nodename}/instance/path/{namespace}/{kind}/{name}/action/stop', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postInstanceActionUnfreeze operation.
     * @callback module:api/InstanceSvcApi~postInstanceActionUnfreezeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InstanceActionAccepted} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unfreeze the object instance.
     * @param {String} nodename 
     * @param {String} namespace 
     * @param {module:model/Kind} kind 
     * @param {String} name 
     * @param {Object} opts Optional parameters
     * @param {String} [requesterSid] 
     * @param {module:api/InstanceSvcApi~postInstanceActionUnfreezeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InstanceActionAccepted}
     */
    postInstanceActionUnfreeze(nodename, namespace, kind, name, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'nodename' is set
      if (nodename === undefined || nodename === null) {
        throw new Error("Missing the required parameter 'nodename' when calling postInstanceActionUnfreeze");
      }
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling postInstanceActionUnfreeze");
      }
      // verify the required parameter 'kind' is set
      if (kind === undefined || kind === null) {
        throw new Error("Missing the required parameter 'kind' when calling postInstanceActionUnfreeze");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling postInstanceActionUnfreeze");
      }

      let pathParams = {
        'nodename': nodename,
        'namespace': namespace,
        'kind': kind,
        'name': name
      };
      let queryParams = {
        'requester_sid': opts['requesterSid']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InstanceActionAccepted;
      return this.apiClient.callApi(
        '/node/name/{nodename}/instance/path/{namespace}/{kind}/{name}/action/unfreeze', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postInstanceActionUnprovision operation.
     * @callback module:api/InstanceSvcApi~postInstanceActionUnprovisionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InstanceActionAccepted} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unprovision the object instance.
     * @param {String} nodename 
     * @param {String} namespace 
     * @param {module:model/Kind} kind 
     * @param {String} name 
     * @param {Object} opts Optional parameters
     * @param {Boolean} [force] 
     * @param {Boolean} [leader] 
     * @param {String} [requesterSid] 
     * @param {String} [rid] 
     * @param {String} [subset] 
     * @param {String} [tag] 
     * @param {String} [to] 
     * @param {module:api/InstanceSvcApi~postInstanceActionUnprovisionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InstanceActionAccepted}
     */
    postInstanceActionUnprovision(nodename, namespace, kind, name, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'nodename' is set
      if (nodename === undefined || nodename === null) {
        throw new Error("Missing the required parameter 'nodename' when calling postInstanceActionUnprovision");
      }
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling postInstanceActionUnprovision");
      }
      // verify the required parameter 'kind' is set
      if (kind === undefined || kind === null) {
        throw new Error("Missing the required parameter 'kind' when calling postInstanceActionUnprovision");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling postInstanceActionUnprovision");
      }

      let pathParams = {
        'nodename': nodename,
        'namespace': namespace,
        'kind': kind,
        'name': name
      };
      let queryParams = {
        'force': opts['force'],
        'leader': opts['leader'],
        'requester_sid': opts['requesterSid'],
        'rid': opts['rid'],
        'subset': opts['subset'],
        'tag': opts['tag'],
        'to': opts['to']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InstanceActionAccepted;
      return this.apiClient.callApi(
        '/node/name/{nodename}/instance/path/{namespace}/{kind}/{name}/action/unprovision', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postInstanceClear operation.
     * @callback module:api/InstanceSvcApi~postInstanceClearCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Clear an error (\"start failed\" for example) in the instance monitor state. 
     * @param {String} nodename 
     * @param {String} namespace 
     * @param {module:model/Kind} kind 
     * @param {String} name 
     * @param {module:api/InstanceSvcApi~postInstanceClearCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postInstanceClear(nodename, namespace, kind, name, callback) {
      let postBody = null;
      // verify the required parameter 'nodename' is set
      if (nodename === undefined || nodename === null) {
        throw new Error("Missing the required parameter 'nodename' when calling postInstanceClear");
      }
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling postInstanceClear");
      }
      // verify the required parameter 'kind' is set
      if (kind === undefined || kind === null) {
        throw new Error("Missing the required parameter 'kind' when calling postInstanceClear");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling postInstanceClear");
      }

      let pathParams = {
        'nodename': nodename,
        'namespace': namespace,
        'kind': kind,
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/node/name/{nodename}/instance/path/{namespace}/{kind}/{name}/clear', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
