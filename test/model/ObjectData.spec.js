/**
 * opensvc agent api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.12.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.OpensvcAgentApi);
  }
}(this, function(expect, OpensvcAgentApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new OpensvcAgentApi.ObjectData();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ObjectData', function() {
    it('should create an instance of ObjectData', function() {
      // uncomment below and update the code to test ObjectData
      //var instance = new OpensvcAgentApi.ObjectData();
      //expect(instance).to.be.a(OpensvcAgentApi.ObjectData);
    });

    it('should have the property avail (base name: "avail")', function() {
      // uncomment below and update the code to test the property avail
      //var instance = new OpensvcAgentApi.ObjectData();
      //expect(instance).to.be();
    });

    it('should have the property flexMax (base name: "flex_max")', function() {
      // uncomment below and update the code to test the property flexMax
      //var instance = new OpensvcAgentApi.ObjectData();
      //expect(instance).to.be();
    });

    it('should have the property flexMin (base name: "flex_min")', function() {
      // uncomment below and update the code to test the property flexMin
      //var instance = new OpensvcAgentApi.ObjectData();
      //expect(instance).to.be();
    });

    it('should have the property flexTarget (base name: "flex_target")', function() {
      // uncomment below and update the code to test the property flexTarget
      //var instance = new OpensvcAgentApi.ObjectData();
      //expect(instance).to.be();
    });

    it('should have the property frozen (base name: "frozen")', function() {
      // uncomment below and update the code to test the property frozen
      //var instance = new OpensvcAgentApi.ObjectData();
      //expect(instance).to.be();
    });

    it('should have the property instances (base name: "instances")', function() {
      // uncomment below and update the code to test the property instances
      //var instance = new OpensvcAgentApi.ObjectData();
      //expect(instance).to.be();
    });

    it('should have the property orchestrate (base name: "orchestrate")', function() {
      // uncomment below and update the code to test the property orchestrate
      //var instance = new OpensvcAgentApi.ObjectData();
      //expect(instance).to.be();
    });

    it('should have the property overall (base name: "overall")', function() {
      // uncomment below and update the code to test the property overall
      //var instance = new OpensvcAgentApi.ObjectData();
      //expect(instance).to.be();
    });

    it('should have the property placementPolicy (base name: "placement_policy")', function() {
      // uncomment below and update the code to test the property placementPolicy
      //var instance = new OpensvcAgentApi.ObjectData();
      //expect(instance).to.be();
    });

    it('should have the property placementState (base name: "placement_state")', function() {
      // uncomment below and update the code to test the property placementState
      //var instance = new OpensvcAgentApi.ObjectData();
      //expect(instance).to.be();
    });

    it('should have the property pool (base name: "pool")', function() {
      // uncomment below and update the code to test the property pool
      //var instance = new OpensvcAgentApi.ObjectData();
      //expect(instance).to.be();
    });

    it('should have the property priority (base name: "priority")', function() {
      // uncomment below and update the code to test the property priority
      //var instance = new OpensvcAgentApi.ObjectData();
      //expect(instance).to.be();
    });

    it('should have the property provisioned (base name: "provisioned")', function() {
      // uncomment below and update the code to test the property provisioned
      //var instance = new OpensvcAgentApi.ObjectData();
      //expect(instance).to.be();
    });

    it('should have the property scope (base name: "scope")', function() {
      // uncomment below and update the code to test the property scope
      //var instance = new OpensvcAgentApi.ObjectData();
      //expect(instance).to.be();
    });

    it('should have the property size (base name: "size")', function() {
      // uncomment below and update the code to test the property size
      //var instance = new OpensvcAgentApi.ObjectData();
      //expect(instance).to.be();
    });

    it('should have the property topology (base name: "topology")', function() {
      // uncomment below and update the code to test the property topology
      //var instance = new OpensvcAgentApi.ObjectData();
      //expect(instance).to.be();
    });

    it('should have the property upInstancesCount (base name: "up_instances_count")', function() {
      // uncomment below and update the code to test the property upInstancesCount
      //var instance = new OpensvcAgentApi.ObjectData();
      //expect(instance).to.be();
    });

    it('should have the property updatedAt (base name: "updated_at")', function() {
      // uncomment below and update the code to test the property updatedAt
      //var instance = new OpensvcAgentApi.ObjectData();
      //expect(instance).to.be();
    });

  });

}));
