/**
 * opensvc agent api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.12.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.OpensvcAgentApi);
  }
}(this, function(expect, OpensvcAgentApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new OpensvcAgentApi.InstanceVolApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('InstanceVolApi', function() {
    describe('getInstance', function() {
      it('should call getInstance successfully', function(done) {
        //uncomment below and update the code to test getInstance
        //instance.getInstance(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getInstanceLogs', function() {
      it('should call getInstanceLogs successfully', function(done) {
        //uncomment below and update the code to test getInstanceLogs
        //instance.getInstanceLogs(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getObjectSchedule', function() {
      it('should call getObjectSchedule successfully', function(done) {
        //uncomment below and update the code to test getObjectSchedule
        //instance.getObjectSchedule(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('postInstanceActionBoot', function() {
      it('should call postInstanceActionBoot successfully', function(done) {
        //uncomment below and update the code to test postInstanceActionBoot
        //instance.postInstanceActionBoot(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('postInstanceActionDelete', function() {
      it('should call postInstanceActionDelete successfully', function(done) {
        //uncomment below and update the code to test postInstanceActionDelete
        //instance.postInstanceActionDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('postInstanceActionFreeze', function() {
      it('should call postInstanceActionFreeze successfully', function(done) {
        //uncomment below and update the code to test postInstanceActionFreeze
        //instance.postInstanceActionFreeze(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('postInstanceActionProvision', function() {
      it('should call postInstanceActionProvision successfully', function(done) {
        //uncomment below and update the code to test postInstanceActionProvision
        //instance.postInstanceActionProvision(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('postInstanceActionShutdown', function() {
      it('should call postInstanceActionShutdown successfully', function(done) {
        //uncomment below and update the code to test postInstanceActionShutdown
        //instance.postInstanceActionShutdown(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('postInstanceActionStart', function() {
      it('should call postInstanceActionStart successfully', function(done) {
        //uncomment below and update the code to test postInstanceActionStart
        //instance.postInstanceActionStart(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('postInstanceActionStartStandby', function() {
      it('should call postInstanceActionStartStandby successfully', function(done) {
        //uncomment below and update the code to test postInstanceActionStartStandby
        //instance.postInstanceActionStartStandby(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('postInstanceActionStop', function() {
      it('should call postInstanceActionStop successfully', function(done) {
        //uncomment below and update the code to test postInstanceActionStop
        //instance.postInstanceActionStop(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('postInstanceActionUnfreeze', function() {
      it('should call postInstanceActionUnfreeze successfully', function(done) {
        //uncomment below and update the code to test postInstanceActionUnfreeze
        //instance.postInstanceActionUnfreeze(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('postInstanceActionUnprovision', function() {
      it('should call postInstanceActionUnprovision successfully', function(done) {
        //uncomment below and update the code to test postInstanceActionUnprovision
        //instance.postInstanceActionUnprovision(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('postInstanceClear', function() {
      it('should call postInstanceClear successfully', function(done) {
        //uncomment below and update the code to test postInstanceClear
        //instance.postInstanceClear(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
